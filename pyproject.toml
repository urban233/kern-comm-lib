[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "kern-comm-lib"
version = "0.0.2"
description = "Kern: A collection of robust, foundational Python utilities for building reliable and maintainable applications."
authors = [
    {name = "Martin Urban",email = "martin.urban@studmail.w-hs.de"}
]
license = {text = "BSD-3-Clause"}
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
]

[project.urls]
homepage = "https://github.com/urban233/kern-comm-lib"
repository = "https://github.com/urban233/kern-comm-lib"

[tool.ruff]
# Target Python version - matches Python 3.10 features and syntax
target-version = "py310"
# Maximum line length to match common Python style guides
line-length = 80
# Custom exclusion patterns for files and directories
exclude = [
    "__init__.py",
]
# Directories to exclude from linting
extend-exclude = [".venv/", "docs"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors (PEP 8 style guide enforcement)
    "F",    # pyflakes (detects logical errors and undefined names)
    "B",    # flake8-bugbear (detects likely bugs and design problems)
    "I",    # isort (sorts imports alphabetically and by sections)
    "C4",   # flake8-comprehensions (better list/dict/set comprehensions)
    "PL",   # pylint rules (general Python linting rules)
    "PD",   # pandas-vet (best practices for pandas usage)
    "NPY",  # NumPy-specific checks (proper NumPy API usage)
    "D",    # pydocstyle (documentation style enforcement)
    "UP",   # pyupgrade (upgrade syntax to newer Python)
    "TID",  # typeid (type identifier validation)
    "TCH",  # type-checking (static type checking assistance)
    "SIM",  # simplify (code simplification suggestions)
]
ignore = [
    "D203",  # one-blank-line-before-class (conflicts with Google style)
    "D213",  # multi-line-summary-second-line (conflicts with Google style)
    "E501",  # line-too-long (already handled by pyink formatter)
    "B011",  # assert-false (raising an exception is not preferred in a no-exception context)
]

# isort configuration for import sorting
[tool.ruff.lint.isort]
# Define project-specific modules to handle import sorting correctly
known-first-party = ["src", "automations"]

# pydocstyle configuration for docstring formatting
[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings as seen in the codebase
convention = "google"

# McCabe complexity checker configuration
[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity allowed for functions
max-complexity = 15

# Pylint configuration options
[tool.ruff.lint.pylint]
# Maximum number of arguments allowed in a function
max-args = 6
# Maximum number of branches allowed in a function
max-branches = 12
# Maximum number of statements allowed in a function
max-statements = 50

[tool.pyink]
line-length = 80
target-version = ['py310']
pyink-indentation = 2

[tool.pyright]
include = ["src/kern_comm_lib"]
ignore = ["automations"]
# Don't require type stub files (*.pyi) for all imports
reportMissingTypeStubs = false
