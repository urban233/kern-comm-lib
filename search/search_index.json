{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Kern (<code>kern-comm-lib</code>) is an open-source collection of Python code designed to augment the Python standard library. It provides robust, exception-free Python utilities for building reliable applications and features modern error handling with <code>Status</code> and <code>StatusOr</code> to eliminate runtime surprises.</p>"},{"location":"#features","title":"Features \u2728","text":"<ul> <li>Exception-Free modules: Predictable error handling without <code>try/except</code> sprawl.</li> <li>Status &amp; StatusOr: Modern result types for explicit success/failure handling.</li> <li>Thread-safe logging: Log messages with thread safety and flexibility.</li> </ul>"},{"location":"#installation","title":"Installation \u2699\ufe0f","text":"<pre><code>pip install kern-comm-lib\n</code></pre>"},{"location":"#design-philosophy","title":"Design Philosophy \ud83e\udde0","text":"<p>The core idea of Kern is to provide an exception-free alternative to common standard libraries of Python. Kern is divided into two major parts: (1) the <code>base</code> package and (2) other high-level packages (e.g. filesystem). The <code>base</code> package is the standard every other high-level package uses. For example, the <code>base</code> package contains the <code>log</code> and <code>status</code> package which should be used in a high-level package like <code>filesystem</code> that wraps filesystem functions of the standard library in an exception-free way. Therefore, the high-level packages are consumers of the <code>base</code> package and should it import like any other user with <code>import kern_comm_lib as kern</code>.</p>"},{"location":"#contributing","title":"Contributing \ud83e\udd1d","text":"<p>Contributions are welcome! Be aware that this project uses ruff as a linter pyink as a formatter, and pyright as a type checker.</p>"},{"location":"#license","title":"License \ud83d\udcdc","text":"<p>BSD-3 Clause. See LICENSE.</p> <p>Engineered for reliability.</p>"},{"location":"api_reference/","title":"Kern reference","text":"<p>This reference manual details functions, modules, and objects included in Kern,  describing what they are and what they do.</p>"},{"location":"api_reference/#python-api","title":"Python API","text":"<ul> <li>base package<ul> <li>status package<ul> <li>Status</li> <li>StatusCode</li> <li>StatusOr</li> </ul> </li> </ul> </li> <li>filesystem package</li> <li>KPath class</li> </ul>"},{"location":"api_reference/base/","title":"base package","text":""},{"location":"api_reference/base/#kern_comm_lib.base--file-baseinitpy","title":"File: base/init.py","text":"<p>This file defines the public API of the base package.</p> <p>Modules:</p> <ul> <li> <code>log</code>           \u2013            </li> <li> <code>os</code>           \u2013            </li> <li> <code>status</code>           \u2013            </li> <li> <code>threads</code>           \u2013            </li> </ul>"},{"location":"api_reference/base/log/","title":"log package","text":"<p>Modules:</p> <ul> <li> <code>check</code>           \u2013            </li> <li> <code>log</code>           \u2013            </li> <li> <code>log_formatter</code>           \u2013            </li> <li> <code>log_handlers</code>           \u2013            </li> <li> <code>log_severity</code>           \u2013            </li> <li> <code>logger</code>           \u2013            </li> </ul>"},{"location":"api_reference/base/log/check/","title":"check","text":""},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check--file-baselogcheckpy","title":"File: base/log/check.py","text":"<p>This file declares a family of <code>CHECK</code> macros.</p> <p><code>CHECK</code> \"macros\" (in Python terminology would these be check functions) terminate the program with a fatal error if the specified condition is not true.</p> <p><code>DCHECK</code> \"macros\" (in Python terminology would these be dcheck functions) terminate the program with a fatal error if the Python code is run in debug mode (the default) and the condition is not true. To disable the <code>DCHECK</code> macros, set the either the PYTHON_OPTIMIZE=1 or run the Python script with the -O option. This will set the debug variable to False, which will disable the <code>DCHECK</code> macros.</p> <p><code>CHECK</code> and friends are thus useful for confirming invariants in situations where continuing to run would be worse than terminating, e.g., due to risk of data corruption or security compromise. It is also more robust and portable to deliberately terminate at a particular place with a useful message and backtrace than to assume some ultimately unspecified and unreliable crashing behavior (such as a \"segmentation fault\").</p> <p>Functions:</p> <ul> <li> <code>DCHECK</code>             \u2013              <p>Debug-only check removed in optimized mode.</p> </li> <li> <code>DCHECK_EQ</code>             \u2013              <p>Checks if two values are equal.</p> </li> <li> <code>DCHECK_NOT_EQ</code>             \u2013              <p>Checks if two values are equal.</p> </li> <li> <code>DCHECK_NOT_NONE</code>             \u2013              <p>Checks if a value is not None.</p> </li> <li> <code>DCHECK_LESS_THAN</code>             \u2013              <p>Checks if a value is less than a certain conditional value.</p> </li> <li> <code>DCHECK_GREATER_THAN</code>             \u2013              <p>Checks if a value is greater than a certain conditional value.</p> </li> <li> <code>DCHECK_IS_TYPE</code>             \u2013              <p>Checks if a value is a given type.</p> </li> <li> <code>DCHECK_IN_ENUM</code>             \u2013              <p>Debug-only check that verifies if a value is a member of the specified enum.</p> </li> </ul>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK","title":"DCHECK","text":"<pre><code>DCHECK(condition: Callable[[], bool], message: Callable[[], str] | None = None) -&gt; None\n</code></pre> <p>Debug-only check removed in optimized mode.</p> <p><code>DCHECK</code> behaves like <code>CHECK</code> in debug mode and does nothing otherwise (as <code>DLOG</code>). It uses the <code>__debug__</code> variable to determine if the code is running in debug mode and uses lazy evaluation of the condition to have no runtime overhead in release builds. However, this requires the condition to be a lambda function (see Examples).</p> <p>Parameters:</p> <ul> <li> <code>condition</code>               (<code>Callable[[], bool]</code>)           \u2013            <p>A callable that returns the condition to check</p> </li> <li> <code>message</code>               (<code>Callable[[], str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional callable that returns an error message</p> </li> </ul> <p>Examples:</p> <p>A simple example of how to use <code>DCHECK</code>:</p> <p>import kern_comm_lib as kern tmp_str = \"Test\" kern.DCHECK(lambda: tmp_str == \"Test1\", lambda: \"String is not equal\") In production, use more specific DCHECK functions like DCHECK_EQ or DCHECK_NOT_EQ for simple comparisons.</p> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK(\n    condition: Callable[[], bool], message: Callable[[], str] | None = None\n) -&gt; None:\n  \"\"\"Debug-only check removed in optimized mode.\n\n  `DCHECK` behaves like `CHECK` in debug mode and does nothing otherwise (as\n  `DLOG`). It uses the `__debug__` variable to determine if the code is running\n  in debug mode and uses lazy evaluation of the condition to have no runtime\n  overhead in release builds. However, this requires the condition to be a\n  lambda function (see Examples).\n\n  Args:\n      condition: A callable that returns the condition to check\n      message: Optional callable that returns an error message\n\n  Examples:\n    A simple example of how to use `DCHECK`:\n      &gt;&gt;&gt; import kern_comm_lib as kern\n      &gt;&gt;&gt; tmp_str = \"Test\"\n      &gt;&gt;&gt; kern.DCHECK(lambda: tmp_str == \"Test1\", lambda: \"String is not equal\")\n    In production, use more specific DCHECK functions like DCHECK_EQ or DCHECK_NOT_EQ\n    for simple comparisons.\n  \"\"\"\n  if __debug__:  # noqa: SIM102 (Two if statements are needed to avoid lambda evaluation)\n    # Evaluate the condition lazily only in debug mode\n    if not condition():\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      if message is None:\n        print(\n            f\"FATAL ERROR: {filename}:{lineno}: The given condition is not true\",\n            file=sys.stderr,\n        )\n        sys.exit(1)\n      print(f\"FATAL ERROR: {filename}:{lineno}: {message()}\", file=sys.stderr)\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK_EQ","title":"DCHECK_EQ","text":"<pre><code>DCHECK_EQ(arg1: object, arg2: object) -&gt; None\n</code></pre> <p>Checks if two values are equal.</p> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK_EQ(arg1: object, arg2: object) -&gt; None:\n  \"\"\"Checks if two values are equal.\"\"\"\n  if __debug__:  # noqa: SIM102 (Two if statements are needed to avoid lambda evaluation)\n    if arg1 != arg2:\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      print(\n          f\"FATAL ERROR: {filename}:{lineno}: {arg1} is NOT equal to {arg2}\",\n          file=sys.stderr,\n      )\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK_NOT_EQ","title":"DCHECK_NOT_EQ","text":"<pre><code>DCHECK_NOT_EQ(arg1: object, arg2: object) -&gt; None\n</code></pre> <p>Checks if two values are equal.</p> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK_NOT_EQ(arg1: object, arg2: object) -&gt; None:\n  \"\"\"Checks if two values are equal.\"\"\"\n  if __debug__:  # noqa: SIM102 (Two if statements are needed to avoid lambda evaluation)\n    if arg1 == arg2:\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      print(\n          f\"FATAL ERROR: {filename}:{lineno}: {arg1} is equal to {arg2}\",\n          file=sys.stderr,\n      )\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK_NOT_NONE","title":"DCHECK_NOT_NONE","text":"<pre><code>DCHECK_NOT_NONE(val: object) -&gt; None\n</code></pre> <p>Checks if a value is not None.</p> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK_NOT_NONE(val: object) -&gt; None:\n  \"\"\"Checks if a value is not None.\"\"\"\n  if __debug__:  # noqa: SIM102 (Two if statements are needed to avoid lambda evaluation)\n    if val is None:\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      print(\n          f\"FATAL ERROR: {filename}:{lineno}: Value should not be None\",\n          file=sys.stderr,\n      )\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK_LESS_THAN","title":"DCHECK_LESS_THAN","text":"<pre><code>DCHECK_LESS_THAN(val: int | float, cond_val: int | float) -&gt; None\n</code></pre> <p>Checks if a value is less than a certain conditional value.</p> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK_LESS_THAN(val: int | float, cond_val: int | float) -&gt; None:\n  \"\"\"Checks if a value is less than a certain conditional value.\"\"\"\n  if __debug__:  # noqa: SIM102 (Two if statements are needed to avoid lambda evaluation)\n    if val &lt; cond_val:\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      print(\n          f\"FATAL ERROR: {filename}:{lineno}: Value MUST be less than {cond_val}\",\n          file=sys.stderr,\n      )\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK_GREATER_THAN","title":"DCHECK_GREATER_THAN","text":"<pre><code>DCHECK_GREATER_THAN(val: int | float, cond_val: int | float) -&gt; None\n</code></pre> <p>Checks if a value is greater than a certain conditional value.</p> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK_GREATER_THAN(val: int | float, cond_val: int | float) -&gt; None:\n  \"\"\"Checks if a value is greater than a certain conditional value.\"\"\"\n  if __debug__:  # noqa: SIM102 (Two if statements are needed to avoid lambda evaluation)\n    if val &gt; cond_val:\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      print(\n          f\"FATAL ERROR: {filename}:{lineno}: Value MUST be greater than {cond_val}\",\n          file=sys.stderr,\n      )\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK_IS_TYPE","title":"DCHECK_IS_TYPE","text":"<pre><code>DCHECK_IS_TYPE(a_val: object, a_type: type) -&gt; None\n</code></pre> <p>Checks if a value is a given type.</p> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK_IS_TYPE(a_val: object, a_type: type) -&gt; None:\n  \"\"\"Checks if a value is a given type.\"\"\"\n  if __debug__:  # noqa: SIM102 (Two if statements are needed to avoid lambda evaluation)\n    if not isinstance(a_val, a_type):\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      print(\n          f\"FATAL ERROR: {filename}:{lineno}: Value MUST be of type {type(a_type).__name__}\",\n          file=sys.stderr,\n      )\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/check/#kern_comm_lib.base.log.check.DCHECK_IN_ENUM","title":"DCHECK_IN_ENUM","text":"<pre><code>DCHECK_IN_ENUM(a_val: object, an_enum_class: type[IntEnum]) -&gt; None\n</code></pre> <p>Debug-only check that verifies if a value is a member of the specified enum.</p> <p>Parameters:</p> <ul> <li> <code>a_val</code>               (<code>object</code>)           \u2013            <p>The value to check</p> </li> <li> <code>an_enum_class</code>               (<code>type[IntEnum]</code>)           \u2013            <p>The enum class to check against</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/check.py</code> <pre><code>def DCHECK_IN_ENUM(a_val: object, an_enum_class: type[\"enum.IntEnum\"]) -&gt; None:\n  \"\"\"Debug-only check that verifies if a value is a member of the specified enum.\n\n  Args:\n      a_val: The value to check\n      an_enum_class: The enum class to check against\n  \"\"\"\n  if __debug__:\n    try:\n      an_enum_class(\n          a_val\n      )  # This will raise ValueError if val is not in the enum\n    except ValueError:\n      # &lt;editor-fold desc=\"Gets caller's frame information\"&gt;\n      # Get caller's frame information which cannot be placed in its own\n      # function because it would use the wrong function's frame!\n      current_frame = inspect.currentframe()\n      if current_frame is None:\n        print(\"FATAL ERROR: Current frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      frame = current_frame.f_back\n      if frame is None:\n        print(\"FATAL ERROR: Caller frame is None\", file=sys.stderr)\n        sys.exit(1)\n\n      filename = frame.f_code.co_filename\n      lineno = frame.f_lineno\n      # &lt;/editor-fold&gt;\n      print(\n          f\"FATAL ERROR: {filename}:{lineno}: Value {a_val} is not a valid member of enum {an_enum_class.__name__}\",\n          file=sys.stderr,\n      )\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/","title":"log","text":""},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log--file-baseloglogpy","title":"File: base/log/log.py","text":"<p>This file declares a family of LOG functions.</p> <p>Most <code>LOG</code> macros take a severity level argument.  The severity levels are <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, and <code>FATAL</code>.  They are defined in base/log/log_severity.py.</p> <p>Functions:</p> <ul> <li> <code>init_kern_logging</code>             \u2013              <p>Initializes the logging system with a default logger and handlers.</p> </li> <li> <code>close_kern_logging</code>             \u2013              <p>Closes all log handlers and releases resources.</p> </li> <li> <code>init_thread_specific_kern_logging</code>             \u2013              <p>Initializes the logging system with a thread-specific logger and handlers.</p> </li> <li> <code>close_thread_specific_kern_logging</code>             \u2013              <p>Closes all log handlers and releases resources that belong to a thread specific logger.</p> </li> <li> <code>LOG</code>             \u2013              <p>Logs a message with the specified severity level.</p> </li> <li> <code>LOG_INFO</code>             \u2013              <p>Logs an informational message.</p> </li> <li> <code>LOG_WARNING</code>             \u2013              <p>Logs a warning message.</p> </li> <li> <code>LOG_ERROR</code>             \u2013              <p>Logs an error message.</p> </li> <li> <code>LOG_FATAL</code>             \u2013              <p>Logs a fatal error message and terminates the program.</p> </li> <li> <code>DLOG</code>             \u2013              <p>Logs a message with the specified severity level in debug mode.</p> </li> <li> <code>DLOG_INFO</code>             \u2013              <p>Logs an informational message in debug mode.</p> </li> <li> <code>DLOG_WARNING</code>             \u2013              <p>Logs a warning message in debug mode.</p> </li> <li> <code>DLOG_ERROR</code>             \u2013              <p>Logs an error message in debug mode.</p> </li> <li> <code>DLOG_FATAL</code>             \u2013              <p>Logs a fatal error message in debug mode and terminates the program.</p> </li> <li> <code>TLOG</code>             \u2013              <p>Logs a message with the specified severity level using thread-specific logger.</p> </li> <li> <code>TLOG_INFO</code>             \u2013              <p>Logs an informational message using thread-specific logger.</p> </li> <li> <code>TLOG_WARNING</code>             \u2013              <p>Logs a warning message using thread-specific logger.</p> </li> <li> <code>TLOG_ERROR</code>             \u2013              <p>Logs an error message using thread-specific logger.</p> </li> <li> <code>TLOG_FATAL</code>             \u2013              <p>Logs a fatal error message using thread-specific logger and terminates the program.</p> </li> <li> <code>DTLOG</code>             \u2013              <p>Logs a message with the specified severity level in debug mode using thread-specific logger.</p> </li> <li> <code>DTLOG_INFO</code>             \u2013              <p>Logs an informational message in debug mode using thread-specific logger.</p> </li> <li> <code>DTLOG_WARNING</code>             \u2013              <p>Logs a warning message in debug mode using thread-specific logger.</p> </li> <li> <code>DTLOG_ERROR</code>             \u2013              <p>Logs an error message in debug mode using thread-specific logger.</p> </li> <li> <code>DTLOG_FATAL</code>             \u2013              <p>Logs a fatal error message in debug mode using thread-specific logger and terminates the program.</p> </li> </ul>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.init_kern_logging","title":"init_kern_logging","text":"<pre><code>init_kern_logging(program_name: str, log_dir: str = '') -&gt; Status\n</code></pre> <p>Initializes the logging system with a default logger and handlers.</p> <p>Parameters:</p> <ul> <li> <code>program_name</code>               (<code>str</code>)           \u2013            <p>The name of the program, used for naming log files.</p> </li> <li> <code>log_dir</code>               (<code>default</code>, default:                   <code>''</code> )           \u2013            <p>\"\"): The directory where log files will be stored. If None, no file handler is added.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the initialization process.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def init_kern_logging(program_name: str, log_dir: str = \"\") -&gt; Status:\n  \"\"\"Initializes the logging system with a default logger and handlers.\n\n  Args:\n    program_name: The name of the program, used for naming log files.\n    log_dir (default: \"\"): The directory where log files will be stored. If None, no file handler is added.\n\n  Returns:\n    A Status object indicating success or failure of the initialization process.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  DCHECK_NOT_NONE(log_dir)\n  # &lt;/editor-fold&gt;\n\n  global _initialized  # noqa: PLW0603 (module level variable is the simplest way to track initialization)\n  if _initialized:\n    return Status()  # Return success if already initialized\n\n  logger = Logger.get_default()\n\n  # Always add a console handler to the logger\n  tmp_status = logger.add_handler(ConsoleLogHandler())\n  if not tmp_status.ok():\n    return tmp_status\n\n  # Add a file handler if a log directory is provided\n  if log_dir != \"\":\n    try:\n      import os\n\n      os.makedirs(log_dir, exist_ok=True)  # Ensure the log directory exists\n      log_path = os.path.join(\n          log_dir, f\"{program_name}.log\"\n      )  # Construct the log file path\n      file_handler = FileLogHandler(log_path)\n      status = logger.add_handler(file_handler)\n      if not status.ok():\n        return status\n    except Exception as e:\n      return Status.from_exception(e)\n\n  _initialized = True  # Mark the logging system as initialized\n  return Status()\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.close_kern_logging","title":"close_kern_logging","text":"<pre><code>close_kern_logging() -&gt; Status\n</code></pre> <p>Closes all log handlers and releases resources.</p> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def close_kern_logging() -&gt; Status:\n  \"\"\"Closes all log handlers and releases resources.\n\n  Returns:\n    A Status object indicating success or failure of the operation.\n  \"\"\"\n  logger = Logger.get_default()\n  status = logger.close_all_handlers()\n  if not status.ok():\n    return status\n\n  global _initialized  # noqa: PLW0603 (module level variable is the simplest way to track initialization)\n  _initialized = False  # Mark the logging system as uninitialized\n  return Status()\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.init_thread_specific_kern_logging","title":"init_thread_specific_kern_logging","text":"<pre><code>init_thread_specific_kern_logging(log_dir: str = '') -&gt; Status\n</code></pre> <p>Initializes the logging system with a thread-specific logger and handlers.</p> <p>Parameters:</p> <ul> <li> <code>log_dir</code>               (<code>default</code>, default:                   <code>''</code> )           \u2013            <p>\"\"): The directory where log files will be stored. If None, no file handler is added.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the initialization process.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def init_thread_specific_kern_logging(log_dir: str = \"\") -&gt; Status:\n  \"\"\"Initializes the logging system with a thread-specific logger and handlers.\n\n  Args:\n    log_dir (default: \"\"): The directory where log files will be stored. If None, no file handler is added.\n\n  Returns:\n    A Status object indicating success or failure of the initialization process.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  DCHECK_NOT_NONE(log_dir)\n  # &lt;/editor-fold&gt;\n\n  logger = Logger.get_thread_logger()\n  # Always add a console handler to the logger\n  tmp_status = logger.add_handler(ConsoleLogHandler())\n  if not tmp_status.ok():\n    return tmp_status\n\n  # Add a file handler if a log directory is provided\n  if log_dir != \"\":\n    try:\n      import os\n\n      os.makedirs(log_dir, exist_ok=True)  # Ensure the log directory exists\n      log_path = os.path.join(\n          log_dir, f\"{logger.name}.log\"\n      )  # Construct the log file path\n      file_handler = FileLogHandler(log_path)\n      status = logger.add_handler(file_handler)\n      if not status.ok():\n        return status\n    except Exception as e:\n      return Status.from_exception(e)\n  return Status()\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.close_thread_specific_kern_logging","title":"close_thread_specific_kern_logging","text":"<pre><code>close_thread_specific_kern_logging() -&gt; Status\n</code></pre> <p>Closes all log handlers and releases resources that belong to a thread specific logger.</p> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def close_thread_specific_kern_logging() -&gt; Status:\n  \"\"\"Closes all log handlers and releases resources that belong to a thread specific logger.\n\n  Returns:\n    A Status object indicating success or failure of the operation.\n  \"\"\"\n  logger = Logger.get_thread_logger()\n  status = logger.close_all_handlers()\n  if not status.ok():\n    return status\n\n  global _initialized  # noqa: PLW0603 (module level variable is the simplest way to track initialization)\n  _initialized = False  # Mark the logging system as uninitialized\n  return Status()\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.LOG","title":"LOG","text":"<pre><code>LOG(severity: LogSeverity, message: str) -&gt; Status\n</code></pre> <p>Logs a message with the specified severity level.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def LOG(severity: LogSeverity, message: str) -&gt; Status:\n  \"\"\"Logs a message with the specified severity level.\n\n  Args:\n    severity: The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return Logger.get_default().log(severity, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.LOG_INFO","title":"LOG_INFO","text":"<pre><code>LOG_INFO(message: str) -&gt; Status\n</code></pre> <p>Logs an informational message.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def LOG_INFO(message: str) -&gt; Status:\n  \"\"\"Logs an informational message.\n\n  Args:\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return LOG(INFO, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.LOG_WARNING","title":"LOG_WARNING","text":"<pre><code>LOG_WARNING(message: str) -&gt; Status\n</code></pre> <p>Logs a warning message.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def LOG_WARNING(message: str) -&gt; Status:\n  \"\"\"Logs a warning message.\n\n  Args:\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return LOG(WARNING, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.LOG_ERROR","title":"LOG_ERROR","text":"<pre><code>LOG_ERROR(message: str) -&gt; Status\n</code></pre> <p>Logs an error message.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def LOG_ERROR(message: str) -&gt; Status:\n  \"\"\"Logs an error message.\n\n  Args:\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return LOG(ERROR, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.LOG_FATAL","title":"LOG_FATAL","text":"<pre><code>LOG_FATAL(message: str) -&gt; None\n</code></pre> <p>Logs a fatal error message and terminates the program.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>This function will terminate the program after logging the message.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def LOG_FATAL(message: str) -&gt; None:\n  \"\"\"Logs a fatal error message and terminates the program.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    This function will terminate the program after logging the message.\n  \"\"\"\n  LOG(FATAL, message)\n  import sys\n\n  sys.exit(1)  # Terminate the program in case of a fatal error\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DLOG","title":"DLOG","text":"<pre><code>DLOG(severity: LogSeverity, message: str) -&gt; None\n</code></pre> <p>Logs a message with the specified severity level in debug mode.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails. This function returns None if the logging operation is successful. This has to be done instead of a Status object, because if the operation fails the program will be terminated.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DLOG(severity: LogSeverity, message: str) -&gt; None:\n  \"\"\"Logs a message with the specified severity level in debug mode.\n\n  Args:\n    severity: The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n    This function returns None if the logging operation is successful. This has\n    to be done instead of a Status object, because if the operation fails\n    the program will be terminated.\n  \"\"\"\n  if __debug__:\n    tmp_status = Logger.get_default().log(severity, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DLOG_INFO","title":"DLOG_INFO","text":"<pre><code>DLOG_INFO(message: str) -&gt; None\n</code></pre> <p>Logs an informational message in debug mode.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DLOG_INFO(message: str) -&gt; None:\n  \"\"\"Logs an informational message in debug mode.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n  \"\"\"\n  if __debug__:\n    tmp_status = LOG(INFO, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DLOG_WARNING","title":"DLOG_WARNING","text":"<pre><code>DLOG_WARNING(message: str) -&gt; None\n</code></pre> <p>Logs a warning message in debug mode.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DLOG_WARNING(message: str) -&gt; None:\n  \"\"\"Logs a warning message in debug mode.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n  \"\"\"\n  if __debug__:\n    tmp_status = LOG(WARNING, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DLOG_ERROR","title":"DLOG_ERROR","text":"<pre><code>DLOG_ERROR(message: str) -&gt; None\n</code></pre> <p>Logs an error message in debug mode.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DLOG_ERROR(message: str) -&gt; None:\n  \"\"\"Logs an error message in debug mode.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n  \"\"\"\n  if __debug__:\n    tmp_status = LOG(ERROR, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DLOG_FATAL","title":"DLOG_FATAL","text":"<pre><code>DLOG_FATAL(message: str) -&gt; None\n</code></pre> <p>Logs a fatal error message in debug mode and terminates the program.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails. This function will terminate the program after logging the message.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DLOG_FATAL(message: str) -&gt; None:\n  \"\"\"Logs a fatal error message in debug mode and terminates the program.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n    This function will terminate the program after logging the message.\n  \"\"\"\n  if __debug__:\n    DLOG(FATAL, message)\n    sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.TLOG","title":"TLOG","text":"<pre><code>TLOG(severity: LogSeverity, message: str) -&gt; Status\n</code></pre> <p>Logs a message with the specified severity level using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def TLOG(severity: LogSeverity, message: str) -&gt; Status:\n  \"\"\"Logs a message with the specified severity level using thread-specific logger.\n\n  Args:\n    severity: The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return Logger.get_thread_logger().log(severity, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.TLOG_INFO","title":"TLOG_INFO","text":"<pre><code>TLOG_INFO(message: str) -&gt; Status\n</code></pre> <p>Logs an informational message using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def TLOG_INFO(message: str) -&gt; Status:\n  \"\"\"Logs an informational message using thread-specific logger.\n\n  Args:\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return TLOG(INFO, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.TLOG_WARNING","title":"TLOG_WARNING","text":"<pre><code>TLOG_WARNING(message: str) -&gt; Status\n</code></pre> <p>Logs a warning message using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def TLOG_WARNING(message: str) -&gt; Status:\n  \"\"\"Logs a warning message using thread-specific logger.\n\n  Args:\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return TLOG(WARNING, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.TLOG_ERROR","title":"TLOG_ERROR","text":"<pre><code>TLOG_ERROR(message: str) -&gt; Status\n</code></pre> <p>Logs an error message using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def TLOG_ERROR(message: str) -&gt; Status:\n  \"\"\"Logs an error message using thread-specific logger.\n\n  Args:\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  return TLOG(ERROR, message)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.TLOG_FATAL","title":"TLOG_FATAL","text":"<pre><code>TLOG_FATAL(message: str) -&gt; None\n</code></pre> <p>Logs a fatal error message using thread-specific logger and terminates the program.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>This function will terminate the program after logging the message.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def TLOG_FATAL(message: str) -&gt; None:\n  \"\"\"Logs a fatal error message using thread-specific logger and terminates the program.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    This function will terminate the program after logging the message.\n  \"\"\"\n  TLOG(FATAL, message)\n  import sys\n\n  sys.exit(1)  # Terminate the program in case of a fatal error\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DTLOG","title":"DTLOG","text":"<pre><code>DTLOG(severity: LogSeverity, message: str) -&gt; None\n</code></pre> <p>Logs a message with the specified severity level in debug mode using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails. This function returns None if the logging operation is successful. This has to be done instead of a Status object, because if the operation fails the program will be terminated.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DTLOG(severity: LogSeverity, message: str) -&gt; None:\n  \"\"\"Logs a message with the specified severity level in debug mode using thread-specific logger.\n\n  Args:\n    severity: The severity level of the log message (e.g., INFO, WARNING, ERROR, FATAL).\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n    This function returns None if the logging operation is successful. This has\n    to be done instead of a Status object, because if the operation fails\n    the program will be terminated.\n  \"\"\"\n  if __debug__:\n    tmp_status = Logger.get_thread_logger().log(severity, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DTLOG_INFO","title":"DTLOG_INFO","text":"<pre><code>DTLOG_INFO(message: str) -&gt; None\n</code></pre> <p>Logs an informational message in debug mode using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DTLOG_INFO(message: str) -&gt; None:\n  \"\"\"Logs an informational message in debug mode using thread-specific logger.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n  \"\"\"\n  if __debug__:\n    tmp_status = TLOG(INFO, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DTLOG_WARNING","title":"DTLOG_WARNING","text":"<pre><code>DTLOG_WARNING(message: str) -&gt; None\n</code></pre> <p>Logs a warning message in debug mode using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DTLOG_WARNING(message: str) -&gt; None:\n  \"\"\"Logs a warning message in debug mode using thread-specific logger.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n  \"\"\"\n  if __debug__:\n    tmp_status = TLOG(WARNING, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DTLOG_ERROR","title":"DTLOG_ERROR","text":"<pre><code>DTLOG_ERROR(message: str) -&gt; None\n</code></pre> <p>Logs an error message in debug mode using thread-specific logger.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DTLOG_ERROR(message: str) -&gt; None:\n  \"\"\"Logs an error message in debug mode using thread-specific logger.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n  \"\"\"\n  if __debug__:\n    tmp_status = TLOG(ERROR, message)\n    if not tmp_status.ok():\n      sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log/#kern_comm_lib.base.log.log.DTLOG_FATAL","title":"DTLOG_FATAL","text":"<pre><code>DTLOG_FATAL(message: str) -&gt; None\n</code></pre> <p>Logs a fatal error message in debug mode using thread-specific logger and terminates the program.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> Notes <p>It exits the program if the logging operation fails. This function will terminate the program after logging the message.</p> Source code in <code>kern_comm_lib/base/log/log.py</code> <pre><code>def DTLOG_FATAL(message: str) -&gt; None:\n  \"\"\"Logs a fatal error message in debug mode using thread-specific logger and terminates the program.\n\n  Args:\n    message: The log message to be recorded.\n\n  Notes:\n    It exits the program if the logging operation fails.\n    This function will terminate the program after logging the message.\n  \"\"\"\n  if __debug__:\n    DTLOG(FATAL, message)\n    sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log_formatter/","title":"LogFormatter","text":""},{"location":"api_reference/base/log/log_formatter/#kern_comm_lib.base.log.log_formatter--file-baseloglog_formatterpy","title":"File: base/log/log_formatter.py","text":"<p>This file implements a basic log formatter that formats log messages defaulting to a specified pattern used by the GLog library (C++).</p> <p>Classes:</p> <ul> <li> <code>LogFormatter</code>           \u2013            <p>A class for formatting log messages with customizable patterns.</p> </li> </ul>"},{"location":"api_reference/base/log/log_formatter/#kern_comm_lib.base.log.log_formatter.LogFormatter","title":"LogFormatter","text":"<p>A class for formatting log messages with customizable patterns.</p> <p>This formatter allows developers to define a custom log message prefix format, similar to the GLog library. The format can include placeholders for date, time, severity, file name, and line number.</p> <p>Attributes:</p> <ul> <li> <code>format_pattern</code>               (<code>str</code>)           \u2013            <p>The pattern for formatting log messages. If None,   a default pattern is used that mimics GLog.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Initializes the LogFormatter with a given format pattern.</p> </li> <li> <code>format</code>             \u2013              <p>Formats a log message with the specified severity and message.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_formatter.py</code> <pre><code>class LogFormatter:\n  \"\"\"A class for formatting log messages with customizable patterns.\n\n  This formatter allows developers to define a custom log message prefix\n  format, similar to the GLog library. The format can include placeholders\n  for date, time, severity, file name, and line number.\n\n  Attributes:\n    format_pattern (str): The pattern for formatting log messages. If None,\n        a default pattern is used that mimics GLog.\n  \"\"\"\n\n  def __init__(self, format_pattern: str | None = None) -&gt; None:\n    \"\"\"Initializes the LogFormatter with a given format pattern.\n\n    Args:\n      format_pattern (default: None): The pattern for formatting log messages.\n\n    Notes:\n      Default pattern mimics GLog:\n        - %severity% -&gt; First letter of severity (e.g., I, W, E, F)\n        - %Y%m%d -&gt; Full date (year, month, day)\n        - %H:%M:%S.%f -&gt; Time with microseconds\n        - [%F:%L] -&gt; File name and line number of the log call\n    \"\"\"\n    if format_pattern is None:\n      format_pattern = \"%severity%%Y%m%d %H:%M:%S.%f [%F:%L] \"\n    self.format_pattern = format_pattern\n\n  def format(self, severity: log_severity.LogSeverity, message: str) -&gt; str:\n    \"\"\"Formats a log message with the specified severity and message.\n\n    This method generates a log message prefix based on the format pattern\n    and replaces placeholders with actual values such as the current date,\n    time, severity, file name, and line number.\n\n    Args:\n      severity: The severity level of the log message.\n      message: The log message to be formatted.\n\n    Returns:\n      The formatted log message with the prefix.\n\n    Notes:\n      - The file name and line number are determined using the `inspect` module.\n      - If the stack depth is insufficient, \"unknown\" and -1 are used as defaults\n        for the file name and line number, respectively.\n    \"\"\"\n    now = datetime.datetime.now()\n    stack = inspect.stack()\n\n    # Determine the caller's file name and line number\n    if len(stack) &gt; 5:\n      caller_frame = stack[5]\n      filename = caller_frame.filename.split(\"/\")[-1]\n      lineno = caller_frame.lineno\n    else:\n      filename = \"unknown\"\n      lineno = -1\n\n    # Mapping of placeholders to their corresponding values\n    mapping = {\n        \"%Y\": f\"{now.year:04d}\",  # Year (4 digits)\n        \"%m\": f\"{now.month:02d}\",  # Month (2 digits)\n        \"%d\": f\"{now.day:02d}\",  # Day (2 digits)\n        \"%H\": f\"{now.hour:02d}\",  # Hour (2 digits)\n        \"%M\": f\"{now.minute:02d}\",  # Minute (2 digits)\n        \"%S\": f\"{now.second:02d}\",  # Second (2 digits)\n        \"%f\": f\"{now.microsecond:06d}\",  # Microsecond (6 digits)\n        \"%severity%\": severity.name[0]\n        if severity.name\n        else \"?\",  # First letter of severity\n        \"%F\": filename,  # File name\n        \"%L\": str(lineno),  # Line number\n    }\n\n    # Replace placeholders in the format pattern with actual values\n    formatted_prefix = self.format_pattern\n    for key, value in mapping.items():\n      formatted_prefix = formatted_prefix.replace(key, value)\n\n    # Return the formatted log message\n    return f\"{formatted_prefix}{message}\"\n</code></pre>"},{"location":"api_reference/base/log/log_formatter/#kern_comm_lib.base.log.log_formatter.LogFormatter.__init__","title":"__init__","text":"<pre><code>__init__(format_pattern: str | None = None) -&gt; None\n</code></pre> <p>Initializes the LogFormatter with a given format pattern.</p> <p>Parameters:</p> <ul> <li> <code>format_pattern</code>               (<code>default</code>, default:                   <code>None</code> )           \u2013            <p>None): The pattern for formatting log messages.</p> </li> </ul> Notes <p>Default pattern mimics GLog:   - %severity% -&gt; First letter of severity (e.g., I, W, E, F)   - %Y%m%d -&gt; Full date (year, month, day)   - %H:%M:%S.%f -&gt; Time with microseconds   - [%F:%L] -&gt; File name and line number of the log call</p> Source code in <code>kern_comm_lib/base/log/log_formatter.py</code> <pre><code>def __init__(self, format_pattern: str | None = None) -&gt; None:\n  \"\"\"Initializes the LogFormatter with a given format pattern.\n\n  Args:\n    format_pattern (default: None): The pattern for formatting log messages.\n\n  Notes:\n    Default pattern mimics GLog:\n      - %severity% -&gt; First letter of severity (e.g., I, W, E, F)\n      - %Y%m%d -&gt; Full date (year, month, day)\n      - %H:%M:%S.%f -&gt; Time with microseconds\n      - [%F:%L] -&gt; File name and line number of the log call\n  \"\"\"\n  if format_pattern is None:\n    format_pattern = \"%severity%%Y%m%d %H:%M:%S.%f [%F:%L] \"\n  self.format_pattern = format_pattern\n</code></pre>"},{"location":"api_reference/base/log/log_formatter/#kern_comm_lib.base.log.log_formatter.LogFormatter.format","title":"format","text":"<pre><code>format(severity: LogSeverity, message: str) -&gt; str\n</code></pre> <p>Formats a log message with the specified severity and message.</p> <p>This method generates a log message prefix based on the format pattern and replaces placeholders with actual values such as the current date, time, severity, file name, and line number.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be formatted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The formatted log message with the prefix.</p> </li> </ul> Notes <ul> <li>The file name and line number are determined using the <code>inspect</code> module.</li> <li>If the stack depth is insufficient, \"unknown\" and -1 are used as defaults   for the file name and line number, respectively.</li> </ul> Source code in <code>kern_comm_lib/base/log/log_formatter.py</code> <pre><code>def format(self, severity: log_severity.LogSeverity, message: str) -&gt; str:\n  \"\"\"Formats a log message with the specified severity and message.\n\n  This method generates a log message prefix based on the format pattern\n  and replaces placeholders with actual values such as the current date,\n  time, severity, file name, and line number.\n\n  Args:\n    severity: The severity level of the log message.\n    message: The log message to be formatted.\n\n  Returns:\n    The formatted log message with the prefix.\n\n  Notes:\n    - The file name and line number are determined using the `inspect` module.\n    - If the stack depth is insufficient, \"unknown\" and -1 are used as defaults\n      for the file name and line number, respectively.\n  \"\"\"\n  now = datetime.datetime.now()\n  stack = inspect.stack()\n\n  # Determine the caller's file name and line number\n  if len(stack) &gt; 5:\n    caller_frame = stack[5]\n    filename = caller_frame.filename.split(\"/\")[-1]\n    lineno = caller_frame.lineno\n  else:\n    filename = \"unknown\"\n    lineno = -1\n\n  # Mapping of placeholders to their corresponding values\n  mapping = {\n      \"%Y\": f\"{now.year:04d}\",  # Year (4 digits)\n      \"%m\": f\"{now.month:02d}\",  # Month (2 digits)\n      \"%d\": f\"{now.day:02d}\",  # Day (2 digits)\n      \"%H\": f\"{now.hour:02d}\",  # Hour (2 digits)\n      \"%M\": f\"{now.minute:02d}\",  # Minute (2 digits)\n      \"%S\": f\"{now.second:02d}\",  # Second (2 digits)\n      \"%f\": f\"{now.microsecond:06d}\",  # Microsecond (6 digits)\n      \"%severity%\": severity.name[0]\n      if severity.name\n      else \"?\",  # First letter of severity\n      \"%F\": filename,  # File name\n      \"%L\": str(lineno),  # Line number\n  }\n\n  # Replace placeholders in the format pattern with actual values\n  formatted_prefix = self.format_pattern\n  for key, value in mapping.items():\n    formatted_prefix = formatted_prefix.replace(key, value)\n\n  # Return the formatted log message\n  return f\"{formatted_prefix}{message}\"\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/","title":"Log handlers","text":""},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers--file-baseloglog_handlerspy","title":"File: base/log/log_handlers.py","text":"<p>This file implements two log handlers: - FileLogHandler: Writes log messages to a file. - ConsoleLogHandler: Writes log messages to the console with color formatting.</p> <p>Classes:</p> <ul> <li> <code>ILogHandler</code>           \u2013            <p>Abstract base class for log handlers.</p> </li> <li> <code>FileLogHandler</code>           \u2013            <p>Log handler that writes log messages to a file.</p> </li> <li> <code>ConsoleLogHandler</code>           \u2013            <p>Log handler that writes log messages to the console.</p> </li> </ul>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.ILogHandler","title":"ILogHandler","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for log handlers.</p> <p>Methods:</p> <ul> <li> <code>handle</code>             \u2013              <p>Handles a log message.</p> </li> <li> <code>close</code>             \u2013              <p>Closes the log handler.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>class ILogHandler(ABC):\n  \"\"\"Abstract base class for log handlers.\"\"\"\n\n  @abstractmethod\n  def handle(\n      self, severity: \"log_severity.LogSeverity\", message: str\n  ) -&gt; Status:\n    \"\"\"Handles a log message.\n\n    Args:\n      severity: The severity level of the log message.\n      message: The log message to be handled.\n\n    Returns:\n      A Status object indicating success or failure of the operation.\n    \"\"\"\n    pass\n\n  def close(self) -&gt; Status:\n    \"\"\"Closes the log handler.\n\n    This method should be overridden by subclasses to implement any necessary\n    cleanup operations when the handler is no longer needed.\n    \"\"\"\n    return Status()\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.ILogHandler.handle","title":"handle  <code>abstractmethod</code>","text":"<pre><code>handle(severity: LogSeverity, message: str) -&gt; Status\n</code></pre> <p>Handles a log message.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be handled.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>@abstractmethod\ndef handle(\n    self, severity: \"log_severity.LogSeverity\", message: str\n) -&gt; Status:\n  \"\"\"Handles a log message.\n\n  Args:\n    severity: The severity level of the log message.\n    message: The log message to be handled.\n\n  Returns:\n    A Status object indicating success or failure of the operation.\n  \"\"\"\n  pass\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.ILogHandler.close","title":"close","text":"<pre><code>close() -&gt; Status\n</code></pre> <p>Closes the log handler.</p> <p>This method should be overridden by subclasses to implement any necessary cleanup operations when the handler is no longer needed.</p> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>def close(self) -&gt; Status:\n  \"\"\"Closes the log handler.\n\n  This method should be overridden by subclasses to implement any necessary\n  cleanup operations when the handler is no longer needed.\n  \"\"\"\n  return Status()\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.FileLogHandler","title":"FileLogHandler","text":"<p>               Bases: <code>ILogHandler</code></p> <p>Log handler that writes log messages to a file.</p> <p>Attributes:</p> <ul> <li> <code>file_path</code>               (<code>str</code>)           \u2013            <p>The path to the log file.</p> </li> <li> <code>_mutex</code>               (<code>IMutex</code>)           \u2013            <p>A lock to ensure thread-safe file access.</p> </li> <li> <code>file</code>           \u2013            <p>The file object for the log file.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Initializes a FileLogHandler instance.</p> </li> <li> <code>handle</code>             \u2013              <p>Writes a log message to the file.</p> </li> <li> <code>close</code>             \u2013              <p>Closes the log file.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>class FileLogHandler(ILogHandler):\n  \"\"\"Log handler that writes log messages to a file.\n\n  Attributes:\n      file_path: The path to the log file.\n      _mutex: A lock to ensure thread-safe file access.\n      file: The file object for the log file.\n  \"\"\"\n\n  def __init__(self, file_path: str, format_pattern: str | None = None) -&gt; None:\n    \"\"\"Initializes a FileLogHandler instance.\n\n    Args:\n      file_path: The path to the log file.\n    \"\"\"\n    self.file_path: str = file_path\n    self._mutex: IMutex = MutexFactory.create_mutex()\n    self._formatter: LogFormatter = LogFormatter(format_pattern)\n    try:\n      # self.file should contain the file object, therefore opening the\n      # file_path using a context manager is not applicable here.\n      self.file = open(self.file_path, \"a\")  # noqa: SIM115 (see above)\n    except Exception as e:\n      print(f\"Failed to open log file: {str(e)}\")\n      sys.exit(1)\n\n  def handle(\n      self, severity: \"log_severity.LogSeverity\", message: str\n  ) -&gt; Status:\n    \"\"\"Writes a log message to the file.\n\n    Args:\n      severity: The severity level of the log message.\n      message: The log message to be written.\n\n    Returns:\n      A Status object indicating success or failure of the operation.\n    \"\"\"\n    try:\n      formatted_message = self._formatter.format(severity, message)\n      with self._mutex:\n        self.file.write(f\"{formatted_message}\\n\")\n        self.file.flush()\n      return Status()\n    except Exception as e:\n      return Status.from_exception(e)\n\n  def close(self) -&gt; Status:\n    \"\"\"Closes the log file.\n\n    Ensures that the file is properly closed, even if an exception occurs.\n    \"\"\"\n    with self._mutex:\n      try:\n        self.file.close()\n        return Status()\n      except Exception as e:\n        return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.FileLogHandler.__init__","title":"__init__","text":"<pre><code>__init__(file_path: str, format_pattern: str | None = None) -&gt; None\n</code></pre> <p>Initializes a FileLogHandler instance.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str</code>)           \u2013            <p>The path to the log file.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>def __init__(self, file_path: str, format_pattern: str | None = None) -&gt; None:\n  \"\"\"Initializes a FileLogHandler instance.\n\n  Args:\n    file_path: The path to the log file.\n  \"\"\"\n  self.file_path: str = file_path\n  self._mutex: IMutex = MutexFactory.create_mutex()\n  self._formatter: LogFormatter = LogFormatter(format_pattern)\n  try:\n    # self.file should contain the file object, therefore opening the\n    # file_path using a context manager is not applicable here.\n    self.file = open(self.file_path, \"a\")  # noqa: SIM115 (see above)\n  except Exception as e:\n    print(f\"Failed to open log file: {str(e)}\")\n    sys.exit(1)\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.FileLogHandler.handle","title":"handle","text":"<pre><code>handle(severity: LogSeverity, message: str) -&gt; Status\n</code></pre> <p>Writes a log message to the file.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be written.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>def handle(\n    self, severity: \"log_severity.LogSeverity\", message: str\n) -&gt; Status:\n  \"\"\"Writes a log message to the file.\n\n  Args:\n    severity: The severity level of the log message.\n    message: The log message to be written.\n\n  Returns:\n    A Status object indicating success or failure of the operation.\n  \"\"\"\n  try:\n    formatted_message = self._formatter.format(severity, message)\n    with self._mutex:\n      self.file.write(f\"{formatted_message}\\n\")\n      self.file.flush()\n    return Status()\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.FileLogHandler.close","title":"close","text":"<pre><code>close() -&gt; Status\n</code></pre> <p>Closes the log file.</p> <p>Ensures that the file is properly closed, even if an exception occurs.</p> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>def close(self) -&gt; Status:\n  \"\"\"Closes the log file.\n\n  Ensures that the file is properly closed, even if an exception occurs.\n  \"\"\"\n  with self._mutex:\n    try:\n      self.file.close()\n      return Status()\n    except Exception as e:\n      return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.ConsoleLogHandler","title":"ConsoleLogHandler","text":"<p>               Bases: <code>ILogHandler</code></p> <p>Log handler that writes log messages to the console.</p> <p>Attributes:</p> <ul> <li> <code>_mutex</code>               (<code>IMutex</code>)           \u2013            <p>A lock to ensure thread-safe console access.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Constructor.</p> </li> <li> <code>handle</code>             \u2013              <p>Writes a log message to the console with color formatting.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>class ConsoleLogHandler(ILogHandler):\n  \"\"\"Log handler that writes log messages to the console.\n\n  Attributes:\n    _mutex: A lock to ensure thread-safe console access.\n  \"\"\"\n\n  def __init__(self, format_pattern: str | None = None) -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n      format_pattern: Optional format string for log messages\n    \"\"\"\n    self._mutex: IMutex = MutexFactory.create_mutex()\n    self._formatter: LogFormatter = LogFormatter(format_pattern)\n\n  def handle(\n      self, severity: \"log_severity.LogSeverity\", message: str\n  ) -&gt; Status:\n    \"\"\"Writes a log message to the console with color formatting.\n\n    Args:\n      severity: The severity level of the log message.\n      message: The log message to be written.\n\n    Returns:\n      A Status object indicating success or failure of the operation.\n    \"\"\"\n    try:\n      color_code = {\n          log_severity.INFO: \"\\033[0m\",  # Default color\n          log_severity.WARNING: \"\\033[33m\",  # Yellow\n          log_severity.ERROR: \"\\033[31m\",  # Red\n          log_severity.FATAL: \"\\033[35m\",  # Magenta\n      }.get(severity, \"\\033[0m\")\n\n      reset_code = \"\\033[0m\"  # Reset color\n      formatted_message = self._formatter.format(severity, message)\n      formatted_message_with_color = (\n          f\"{color_code}{formatted_message}{reset_code}\\n\"\n      )\n\n      with self._mutex:\n        sys.stdout.write(formatted_message_with_color)\n        sys.stdout.flush()\n      return Status()\n    except Exception as e:\n      return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.ConsoleLogHandler.__init__","title":"__init__","text":"<pre><code>__init__(format_pattern: str | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> <ul> <li> <code>format_pattern</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional format string for log messages</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>def __init__(self, format_pattern: str | None = None) -&gt; None:\n  \"\"\"Constructor.\n\n  Args:\n    format_pattern: Optional format string for log messages\n  \"\"\"\n  self._mutex: IMutex = MutexFactory.create_mutex()\n  self._formatter: LogFormatter = LogFormatter(format_pattern)\n</code></pre>"},{"location":"api_reference/base/log/log_handlers/#kern_comm_lib.base.log.log_handlers.ConsoleLogHandler.handle","title":"handle","text":"<pre><code>handle(severity: LogSeverity, message: str) -&gt; Status\n</code></pre> <p>Writes a log message to the console with color formatting.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be written.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_handlers.py</code> <pre><code>def handle(\n    self, severity: \"log_severity.LogSeverity\", message: str\n) -&gt; Status:\n  \"\"\"Writes a log message to the console with color formatting.\n\n  Args:\n    severity: The severity level of the log message.\n    message: The log message to be written.\n\n  Returns:\n    A Status object indicating success or failure of the operation.\n  \"\"\"\n  try:\n    color_code = {\n        log_severity.INFO: \"\\033[0m\",  # Default color\n        log_severity.WARNING: \"\\033[33m\",  # Yellow\n        log_severity.ERROR: \"\\033[31m\",  # Red\n        log_severity.FATAL: \"\\033[35m\",  # Magenta\n    }.get(severity, \"\\033[0m\")\n\n    reset_code = \"\\033[0m\"  # Reset color\n    formatted_message = self._formatter.format(severity, message)\n    formatted_message_with_color = (\n        f\"{color_code}{formatted_message}{reset_code}\\n\"\n    )\n\n    with self._mutex:\n      sys.stdout.write(formatted_message_with_color)\n      sys.stdout.flush()\n    return Status()\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/log_severity/","title":"LogSeverity","text":""},{"location":"api_reference/base/log/log_severity/#kern_comm_lib.base.log.log_severity--file-baseloglog_severitypy","title":"File: base/log/log_severity.py","text":"<p>This file declares the log severity level arguments: - INFO - WARNING - ERROR - FATAL</p> <p>These should be used with the appropriate LOG function from the base/log/log.py file.</p> <p>Classes:</p> <ul> <li> <code>LogSeverity</code>           \u2013            <p>An enumeration representing the severity levels for logging.</p> </li> </ul>"},{"location":"api_reference/base/log/log_severity/#kern_comm_lib.base.log.log_severity.LogSeverity","title":"LogSeverity","text":"<p>               Bases: <code>IntEnum</code></p> <p>An enumeration representing the severity levels for logging.</p> <p>Attributes:</p> <ul> <li> <code>INFO</code>           \u2013            <p>Informational messages that highlight the progress of the application.</p> </li> <li> <code>WARNING</code>           \u2013            <p>Potentially harmful situations that should be noted.</p> </li> <li> <code>ERROR</code>           \u2013            <p>Error events that might still allow the application to continue running.</p> </li> <li> <code>FATAL</code>           \u2013            <p>Severe error events that will lead the application to abort.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/log_severity.py</code> <pre><code>class LogSeverity(enum.IntEnum):\n  \"\"\"An enumeration representing the severity levels for logging.\n\n  Attributes:\n    INFO: Informational messages that highlight the progress of the application.\n    WARNING: Potentially harmful situations that should be noted.\n    ERROR: Error events that might still allow the application to continue running.\n    FATAL: Severe error events that will lead the application to abort.\n  \"\"\"\n\n  INFO = 0\n  WARNING = 1\n  ERROR = 2\n  FATAL = 3\n</code></pre>"},{"location":"api_reference/base/log/logger/","title":"Logger","text":""},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger--file-baselogloggerpy","title":"File: base/log/logger.py","text":"<p>This file implements the basic logger class that is used by the LOG functions.</p> <p>Classes:</p> <ul> <li> <code>Logger</code>           \u2013            <p>A thread-safe logger class that manages log handlers and provides logging functionality.</p> </li> </ul>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger","title":"Logger","text":"<p>A thread-safe logger class that manages log handlers and provides logging functionality.</p> <p>Attributes:</p> <ul> <li> <code>_instance_mutex</code>           \u2013            <p>A mutex to ensure thread-safe access to the default logger instance.</p> </li> <li> <code>_default_instance</code>               (<code>Optional[Logger]</code>)           \u2013            <p>The default logger instance, shared across threads.</p> </li> <li> <code>_thread_local</code>           \u2013            <p>Thread-local storage for logger instances.</p> </li> <li> <code>_handlers_registry</code>               (<code>dict[str, list[ILogHandler]]</code>)           \u2013            <p>A registry of handlers for each logger.</p> </li> <li> <code>_registry_mutex</code>           \u2013            <p>A lock to ensure thread-safe access to the handler's registry.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Constructor.</p> </li> <li> <code>add_handler</code>             \u2013              <p>Adds a log handler to the logger.</p> </li> <li> <code>remove_handler</code>             \u2013              <p>Removes a log handler from the logger.</p> </li> <li> <code>close_all_handlers</code>             \u2013              <p>Closes all log handlers.</p> </li> <li> <code>log</code>             \u2013              <p>Logs a message with the specified severity level.</p> </li> <li> <code>get_default</code>             \u2013              <p>Retrieves the default logger instance, creating it if necessary.</p> </li> <li> <code>get_thread_logger</code>             \u2013              <p>Retrieves a thread-specific logger instance, creating it if necessary.</p> </li> <li> <code>cleanup_thread_logger</code>             \u2013              <p>Cleans up the thread-local logger instance, removing it from the registry.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>class Logger:\n  \"\"\"A thread-safe logger class that manages log handlers and provides logging functionality.\n\n  Attributes:\n    _instance_mutex: A mutex to ensure thread-safe access to the default logger instance.\n    _default_instance: The default logger instance, shared across threads.\n    _thread_local: Thread-local storage for logger instances.\n    _handlers_registry: A registry of handlers for each logger.\n    _registry_mutex: A lock to ensure thread-safe access to the handler's registry.\n  \"\"\"\n\n  _instance_mutex = mutex.MutexFactory.create_mutex()\n  _default_instance: Optional[\"Logger\"] = None\n  _thread_local = threading.local()\n  _handlers_registry: dict[str, list[\"ILogHandler\"]] = {}\n  _registry_mutex = mutex.MutexFactory.create_mutex()\n\n  def __init__(self, name: str = \"default\") -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n      name (default: \"default\"): The name of the logger.\n    \"\"\"\n    self.name = name\n    self._handlers: list[ILogHandler] = []\n    self._handlers_lock = mutex.MutexFactory.create_mutex()\n\n    # Register the logger's handlers in a thread-safe manner to the global\n    # default instance\n    with Logger._registry_mutex:\n      Logger._handlers_registry[name] = self._handlers\n\n  def add_handler(self, handler: \"ILogHandler\") -&gt; Status:\n    \"\"\"Adds a log handler to the logger.\n\n    Args:\n      handler: The log handler to add.\n\n    Returns:\n      A Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    DCHECK_NOT_NONE(handler)\n    DCHECK_IS_TYPE(handler, ILogHandler)\n    # &lt;/editor-fold&gt;\n\n    try:\n      # The context manager ensures that the mutex is released even if an exception occurs\n      with self._handlers_lock:\n        if handler not in self._handlers:\n          self._handlers.append(handler)\n      return Status()\n    except Exception as e:\n      return Status.from_exception(e)\n\n  def remove_handler(self, handler: \"ILogHandler\") -&gt; Status:\n    \"\"\"Removes a log handler from the logger.\n\n    Args:\n      handler: The log handler to remove.\n\n    Returns:\n      A Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    DCHECK_NOT_NONE(handler)\n    DCHECK_IS_TYPE(handler, ILogHandler)\n    # &lt;/editor-fold&gt;\n\n    try:\n      # The context manager ensures that the mutex is released even if an exception occurs\n      with self._handlers_lock:\n        if handler in self._handlers:\n          self._handlers.remove(handler)\n      return Status()\n    except Exception as e:\n      return Status.from_exception(e)\n\n  def close_all_handlers(self) -&gt; Status:\n    \"\"\"Closes all log handlers.\n\n    Returns:\n      A Status object indicating success or failure of the logging operation.\n    \"\"\"\n    try:\n      with self._handlers_lock:\n        for handler in self._handlers:\n          tmp_status: Status = handler.close()\n          if not tmp_status.ok():\n            return tmp_status\n        self._handlers.clear()\n      return Status()\n    except Exception as e:\n      return Status.from_exception(e)\n\n  def log(self, severity: \"LogSeverity\", message: str) -&gt; Status:\n    \"\"\"Logs a message with the specified severity level.\n\n    Args:\n      severity: The severity level of the log message.\n      message: The log message to be recorded.\n\n    Returns:\n      A Status object indicating success or failure of the logging operation.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    DCHECK_NOT_NONE(severity)\n    DCHECK_NOT_NONE(message)\n    # &lt;/editor-fold&gt;\n\n    # Get a snapshot of handlers to prevent modification during iteration\n    try:\n      with self._handlers_lock:\n        if not self._handlers:\n          return Status.from_status_code(\n              StatusCode.NOT_FOUND, \"No handlers configured\"\n          )\n        # The shallow copy of the _handlers list is sufficient because:\n        # We only need to protect against list modification (add/remove handlers)\n        # The handler objects themselves are expected to handle their own thread safety\n        handlers = self._handlers.copy()\n    except Exception as e:\n      return Status.from_exception(e)\n\n    # Process handlers outside the lock\n    try:\n      for handler in handlers:\n        tmp_status: Status = handler.handle(severity, message)\n        if not tmp_status.ok():\n          return tmp_status\n      return Status()\n    except Exception as e:\n      return Status.from_exception(e)\n\n  @classmethod\n  def get_default(cls) -&gt; \"Logger\":\n    \"\"\"Retrieves the default logger instance, creating it if necessary.\n\n    Returns:\n      The default logger instance.\n    \"\"\"\n    with cls._instance_mutex:\n      if cls._default_instance is None:\n        cls._default_instance = cls(\"default\")\n      return cls._default_instance\n\n  @classmethod\n  def get_thread_logger(cls, name: str | None = None) -&gt; \"Logger\":\n    \"\"\"Retrieves a thread-specific logger instance, creating it if necessary.\n\n    Args:\n      name (default: None): The name of the logger. If None, a name is generated based on the thread name.\n\n    Returns:\n      The thread-specific logger instance.\n    \"\"\"\n    if not hasattr(cls._thread_local, \"logger\"):\n      with cls._instance_mutex:\n        thread_name = name or f\"thread_{threading.current_thread().name}\"\n        cls._thread_local.logger = cls(thread_name)\n    return cls._thread_local.logger\n\n  @classmethod\n  def cleanup_thread_logger(cls) -&gt; None:\n    \"\"\"Cleans up the thread-local logger instance, removing it from the registry.\"\"\"\n    if hasattr(cls._thread_local, \"logger\"):\n      with cls._registry_mutex:\n        name = cls._thread_local.logger.name\n        if name in cls._handlers_registry:\n          del cls._handlers_registry[name]\n      delattr(cls._thread_local, \"logger\")\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.__init__","title":"__init__","text":"<pre><code>__init__(name: str = 'default') -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>default</code>, default:                   <code>'default'</code> )           \u2013            <p>\"default\"): The name of the logger.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>def __init__(self, name: str = \"default\") -&gt; None:\n  \"\"\"Constructor.\n\n  Args:\n    name (default: \"default\"): The name of the logger.\n  \"\"\"\n  self.name = name\n  self._handlers: list[ILogHandler] = []\n  self._handlers_lock = mutex.MutexFactory.create_mutex()\n\n  # Register the logger's handlers in a thread-safe manner to the global\n  # default instance\n  with Logger._registry_mutex:\n    Logger._handlers_registry[name] = self._handlers\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.add_handler","title":"add_handler","text":"<pre><code>add_handler(handler: ILogHandler) -&gt; Status\n</code></pre> <p>Adds a log handler to the logger.</p> <p>Parameters:</p> <ul> <li> <code>handler</code>               (<code>ILogHandler</code>)           \u2013            <p>The log handler to add.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>def add_handler(self, handler: \"ILogHandler\") -&gt; Status:\n  \"\"\"Adds a log handler to the logger.\n\n  Args:\n    handler: The log handler to add.\n\n  Returns:\n    A Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  DCHECK_NOT_NONE(handler)\n  DCHECK_IS_TYPE(handler, ILogHandler)\n  # &lt;/editor-fold&gt;\n\n  try:\n    # The context manager ensures that the mutex is released even if an exception occurs\n    with self._handlers_lock:\n      if handler not in self._handlers:\n        self._handlers.append(handler)\n    return Status()\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.remove_handler","title":"remove_handler","text":"<pre><code>remove_handler(handler: ILogHandler) -&gt; Status\n</code></pre> <p>Removes a log handler from the logger.</p> <p>Parameters:</p> <ul> <li> <code>handler</code>               (<code>ILogHandler</code>)           \u2013            <p>The log handler to remove.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>def remove_handler(self, handler: \"ILogHandler\") -&gt; Status:\n  \"\"\"Removes a log handler from the logger.\n\n  Args:\n    handler: The log handler to remove.\n\n  Returns:\n    A Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  DCHECK_NOT_NONE(handler)\n  DCHECK_IS_TYPE(handler, ILogHandler)\n  # &lt;/editor-fold&gt;\n\n  try:\n    # The context manager ensures that the mutex is released even if an exception occurs\n    with self._handlers_lock:\n      if handler in self._handlers:\n        self._handlers.remove(handler)\n    return Status()\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.close_all_handlers","title":"close_all_handlers","text":"<pre><code>close_all_handlers() -&gt; Status\n</code></pre> <p>Closes all log handlers.</p> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>def close_all_handlers(self) -&gt; Status:\n  \"\"\"Closes all log handlers.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  try:\n    with self._handlers_lock:\n      for handler in self._handlers:\n        tmp_status: Status = handler.close()\n        if not tmp_status.ok():\n          return tmp_status\n      self._handlers.clear()\n    return Status()\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.log","title":"log","text":"<pre><code>log(severity: LogSeverity, message: str) -&gt; Status\n</code></pre> <p>Logs a message with the specified severity level.</p> <p>Parameters:</p> <ul> <li> <code>severity</code>               (<code>LogSeverity</code>)           \u2013            <p>The severity level of the log message.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The log message to be recorded.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the logging operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>def log(self, severity: \"LogSeverity\", message: str) -&gt; Status:\n  \"\"\"Logs a message with the specified severity level.\n\n  Args:\n    severity: The severity level of the log message.\n    message: The log message to be recorded.\n\n  Returns:\n    A Status object indicating success or failure of the logging operation.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  DCHECK_NOT_NONE(severity)\n  DCHECK_NOT_NONE(message)\n  # &lt;/editor-fold&gt;\n\n  # Get a snapshot of handlers to prevent modification during iteration\n  try:\n    with self._handlers_lock:\n      if not self._handlers:\n        return Status.from_status_code(\n            StatusCode.NOT_FOUND, \"No handlers configured\"\n        )\n      # The shallow copy of the _handlers list is sufficient because:\n      # We only need to protect against list modification (add/remove handlers)\n      # The handler objects themselves are expected to handle their own thread safety\n      handlers = self._handlers.copy()\n  except Exception as e:\n    return Status.from_exception(e)\n\n  # Process handlers outside the lock\n  try:\n    for handler in handlers:\n      tmp_status: Status = handler.handle(severity, message)\n      if not tmp_status.ok():\n        return tmp_status\n    return Status()\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.get_default","title":"get_default  <code>classmethod</code>","text":"<pre><code>get_default() -&gt; Logger\n</code></pre> <p>Retrieves the default logger instance, creating it if necessary.</p> <p>Returns:</p> <ul> <li> <code>Logger</code>           \u2013            <p>The default logger instance.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>@classmethod\ndef get_default(cls) -&gt; \"Logger\":\n  \"\"\"Retrieves the default logger instance, creating it if necessary.\n\n  Returns:\n    The default logger instance.\n  \"\"\"\n  with cls._instance_mutex:\n    if cls._default_instance is None:\n      cls._default_instance = cls(\"default\")\n    return cls._default_instance\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.get_thread_logger","title":"get_thread_logger  <code>classmethod</code>","text":"<pre><code>get_thread_logger(name: str | None = None) -&gt; Logger\n</code></pre> <p>Retrieves a thread-specific logger instance, creating it if necessary.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>default</code>, default:                   <code>None</code> )           \u2013            <p>None): The name of the logger. If None, a name is generated based on the thread name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Logger</code>           \u2013            <p>The thread-specific logger instance.</p> </li> </ul> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>@classmethod\ndef get_thread_logger(cls, name: str | None = None) -&gt; \"Logger\":\n  \"\"\"Retrieves a thread-specific logger instance, creating it if necessary.\n\n  Args:\n    name (default: None): The name of the logger. If None, a name is generated based on the thread name.\n\n  Returns:\n    The thread-specific logger instance.\n  \"\"\"\n  if not hasattr(cls._thread_local, \"logger\"):\n    with cls._instance_mutex:\n      thread_name = name or f\"thread_{threading.current_thread().name}\"\n      cls._thread_local.logger = cls(thread_name)\n  return cls._thread_local.logger\n</code></pre>"},{"location":"api_reference/base/log/logger/#kern_comm_lib.base.log.logger.Logger.cleanup_thread_logger","title":"cleanup_thread_logger  <code>classmethod</code>","text":"<pre><code>cleanup_thread_logger() -&gt; None\n</code></pre> <p>Cleans up the thread-local logger instance, removing it from the registry.</p> Source code in <code>kern_comm_lib/base/log/logger.py</code> <pre><code>@classmethod\ndef cleanup_thread_logger(cls) -&gt; None:\n  \"\"\"Cleans up the thread-local logger instance, removing it from the registry.\"\"\"\n  if hasattr(cls._thread_local, \"logger\"):\n    with cls._registry_mutex:\n      name = cls._thread_local.logger.name\n      if name in cls._handlers_registry:\n        del cls._handlers_registry[name]\n    delattr(cls._thread_local, \"logger\")\n</code></pre>"},{"location":"api_reference/base/os/","title":"os package","text":"<p>Modules:</p> <ul> <li> <code>platform_vars</code>           \u2013            </li> </ul>"},{"location":"api_reference/base/os/platform_vars/","title":"Platform vars","text":""},{"location":"api_reference/base/os/platform_vars/#kern_comm_lib.base.os.platform_vars--file-baseosplatform_varspy","title":"File: base/os/platform_vars.py","text":"<p>This file defines platform-specific variables to determine the current operating system. It checks the platform at runtime and sets the three boolean variables: - IS_WIN: True if the current platform is Windows - IS_DARWIN: True if the current platform is macOS - IS_LINUX: True if the current platform is Linux These variables should be used to write platform-specific code.</p> <p>Functions:</p> <ul> <li> <code>invalid_platform</code>             \u2013              <p>Function that reports that the platform is invalid and returns 1.</p> </li> </ul>"},{"location":"api_reference/base/os/platform_vars/#kern_comm_lib.base.os.platform_vars.invalid_platform","title":"invalid_platform","text":"<pre><code>invalid_platform() -&gt; int\n</code></pre> <p>Function that reports that the platform is invalid and returns 1.</p> Note <p>This function does not automatically crash the program because this creates problems with pythons static type checker. Therefore, the function needs to be nested inside exit(). Therefore, the function returns a non-zero value.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>1 if the platform is invalid.</p> </li> </ul> Source code in <code>kern_comm_lib/base/os/platform_vars.py</code> <pre><code>def invalid_platform() -&gt; int:\n  \"\"\"Function that reports that the platform is invalid and returns 1.\n\n  Note:\n    This function does not automatically crash the program because this\n    creates problems with pythons static type checker. Therefore, the\n    function needs to be nested inside exit(). Therefore, the function\n    returns a non-zero value.\n\n  Returns:\n    1 if the platform is invalid.\n  \"\"\"\n  print(f\"Invalid platform: {platform.system()}\")\n  return 1\n</code></pre>"},{"location":"api_reference/base/status/","title":"status package","text":"<p>Modules:</p> <ul> <li> <code>status</code>           \u2013            </li> <li> <code>status_code</code>           \u2013            </li> <li> <code>status_or</code>           \u2013            </li> </ul>"},{"location":"api_reference/base/status/status/","title":"Status","text":""},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status--file-basestatusstatuspy","title":"File: base/status/status.py","text":"<p>Within PySSA, <code>kern.Status</code> is the primary mechanism for communicating errors in Python, and is used to represent an error state Some of these errors may be recoverable, but others may not. Most functions that can produce a recoverable error should be designed to return an <code>kern.Status</code> (or <code>kern.StatusOr</code>).</p> <p>A <code>kern.Status</code> is designed to either return \"OK\" or one of a number of different error codes, corresponding to typical error conditions. In almost all cases, when using <code>kern.Status</code> you should use the canonical error codes (of type <code>kern.StatusCode</code>) enumerated in the status_code python module. These canonical codes are understood across the codebase.</p> <p>Classes:</p> <ul> <li> <code>Status</code>           \u2013            <p>A class that represents the status of an operation.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>use_status</code>             \u2013              <p>Decorator that wraps a function and converts exceptions to StatusOr objects.</p> </li> <li> <code>invalid_argument_error</code>             \u2013              <p>Creates an invalid argument error status.</p> </li> <li> <code>not_found_error</code>             \u2013              <p>Creates a not found error status.</p> </li> </ul>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status","title":"Status","text":"<p>A class that represents the status of an operation.</p> <p>Attributes:</p> <ul> <li> <code>_status_code</code>               (<code>StatusCode</code>)           \u2013            <p>The status code of the operation.</p> </li> <li> <code>_message</code>               (<code>str | None</code>)           \u2013            <p>An optional message describing the status.</p> </li> <li> <code>_traceback</code>               (<code>str | None</code>)           \u2013            <p>An optional traceback string.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Constructor.</p> </li> <li> <code>from_exception</code>             \u2013              <p>Alternative constructor that creates a Status object from a Python exception.</p> </li> <li> <code>from_status_code</code>             \u2013              <p>Alternative constructor that creates a Status object from a status code.</p> </li> <li> <code>__str__</code>             \u2013              <p>Gets the string representation of the status.</p> </li> <li> <code>ok</code>             \u2013              <p>Checks if the status is OK.</p> </li> <li> <code>status_code</code>             \u2013              <p>Gets the status code.</p> </li> <li> <code>message</code>             \u2013              <p>Gets the message.</p> </li> <li> <code>traceback</code>             \u2013              <p>Gets the traceback.</p> </li> <li> <code>set_traceback</code>             \u2013              <p>Sets the traceback for the status.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>class Status:\n  \"\"\"A class that represents the status of an operation.\n\n  Attributes:\n    _status_code: The status code of the operation.\n    _message: An optional message describing the status.\n    _traceback: An optional traceback string.\n  \"\"\"\n\n  def __init__(\n      self,\n      a_status_code: status_code.StatusCode = status_code.StatusCode.OK,\n      a_message: str | None = None,\n  ):\n    \"\"\"Constructor.\n\n    Args:\n      a_status_code: An optional status code (default: Ok).\n      a_message: An optional message describing the status.\n    \"\"\"\n    self._status_code: status_code.StatusCode = a_status_code\n    self._message: str | None = a_message\n    self._traceback: str | None = None\n\n  # &lt;editor-fold desc=\"Alternative constructors\"&gt;\n  @staticmethod\n  def from_exception(\n      exception: Exception, include_traceback: bool = True\n  ) -&gt; \"Status\":\n    \"\"\"Alternative constructor that creates a Status object from a Python exception.\n\n    Args:\n        exception: The Python exception.\n        include_traceback: Whether to include the exception's traceback.\n\n    Returns:\n        Status: A Status object with the appropriate status code, message, and optionally traceback.\n    \"\"\"\n    tmp_status = Status(\n        status_code.get_status_code_for_exception(exception), str(exception)\n    )\n    if include_traceback:\n      tmp_status.set_traceback(\n          status_code.format_exception_traceback(exception)\n      )\n    return tmp_status\n\n  @staticmethod\n  def from_status_code(\n      a_status_code: status_code.StatusCode,\n      a_message: str | None = None,\n  ) -&gt; \"Status\":\n    \"\"\"Alternative constructor that creates a Status object from a status code.\n\n    Args:\n        a_status_code: The status code.\n        a_message: An optional message describing the status.\n\n    Returns:\n        A Status object with the specified status code and message.\n    \"\"\"\n    return Status(a_status_code, a_message)\n\n  # &lt;/editor-fold&gt;\n\n  # &lt;editor-fold desc=\"Magic methods\"&gt;\n  def __str__(self) -&gt; str:\n    \"\"\"Gets the string representation of the status.\n\n    Returns:\n        str: \"OK\" if the status is OK, otherwise the status code name and message.\n    \"\"\"\n    if self.ok():\n      return \"OK\"\n    return (\n        f\"{self._status_code.name}: {self._message}\"\n        if self._message\n        else self._status_code.name\n    )\n\n  # &lt;/editor-fold&gt;\n\n  # &lt;editor-fold desc=\"Public methods\"&gt;\n  def ok(self) -&gt; bool:\n    \"\"\"Checks if the status is OK.\n\n    Returns:\n        bool: True if the status code is OK, False otherwise.\n    \"\"\"\n    return self._status_code == status_code.StatusCode.OK\n\n  # &lt;editor-fold desc=\"Getter\"&gt;\n  def status_code(self) -&gt; status_code.StatusCode:\n    \"\"\"Gets the status code.\n\n    Returns:\n      The status code.\n    \"\"\"\n    return self._status_code\n\n  def message(self) -&gt; str | None:\n    \"\"\"Gets the message.\n\n    Returns:\n      The message.\n    \"\"\"\n    return self._message\n\n  def traceback(self) -&gt; str | None:\n    \"\"\"Gets the traceback.\"\"\"\n    return self._traceback\n\n  # &lt;/editor-fold&gt;\n\n  # &lt;editor-fold desc=\"Setter\"&gt;\n  def set_traceback(self, a_traceback: str) -&gt; None:\n    \"\"\"Sets the traceback for the status.\n\n    Args:\n        a_traceback: The traceback string.\n    \"\"\"\n    self._traceback = a_traceback\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.__init__","title":"__init__","text":"<pre><code>__init__(a_status_code: StatusCode = status_code.StatusCode.OK, a_message: str | None = None)\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> <ul> <li> <code>a_status_code</code>               (<code>StatusCode</code>, default:                   <code>OK</code> )           \u2013            <p>An optional status code (default: Ok).</p> </li> <li> <code>a_message</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional message describing the status.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def __init__(\n    self,\n    a_status_code: status_code.StatusCode = status_code.StatusCode.OK,\n    a_message: str | None = None,\n):\n  \"\"\"Constructor.\n\n  Args:\n    a_status_code: An optional status code (default: Ok).\n    a_message: An optional message describing the status.\n  \"\"\"\n  self._status_code: status_code.StatusCode = a_status_code\n  self._message: str | None = a_message\n  self._traceback: str | None = None\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.from_exception","title":"from_exception  <code>staticmethod</code>","text":"<pre><code>from_exception(exception: Exception, include_traceback: bool = True) -&gt; Status\n</code></pre> <p>Alternative constructor that creates a Status object from a Python exception.</p> <p>Parameters:</p> <ul> <li> <code>exception</code>               (<code>Exception</code>)           \u2013            <p>The Python exception.</p> </li> <li> <code>include_traceback</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to include the exception's traceback.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code> (              <code>Status</code> )          \u2013            <p>A Status object with the appropriate status code, message, and optionally traceback.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>@staticmethod\ndef from_exception(\n    exception: Exception, include_traceback: bool = True\n) -&gt; \"Status\":\n  \"\"\"Alternative constructor that creates a Status object from a Python exception.\n\n  Args:\n      exception: The Python exception.\n      include_traceback: Whether to include the exception's traceback.\n\n  Returns:\n      Status: A Status object with the appropriate status code, message, and optionally traceback.\n  \"\"\"\n  tmp_status = Status(\n      status_code.get_status_code_for_exception(exception), str(exception)\n  )\n  if include_traceback:\n    tmp_status.set_traceback(\n        status_code.format_exception_traceback(exception)\n    )\n  return tmp_status\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.from_status_code","title":"from_status_code  <code>staticmethod</code>","text":"<pre><code>from_status_code(a_status_code: StatusCode, a_message: str | None = None) -&gt; Status\n</code></pre> <p>Alternative constructor that creates a Status object from a status code.</p> <p>Parameters:</p> <ul> <li> <code>a_status_code</code>               (<code>StatusCode</code>)           \u2013            <p>The status code.</p> </li> <li> <code>a_message</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional message describing the status.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object with the specified status code and message.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>@staticmethod\ndef from_status_code(\n    a_status_code: status_code.StatusCode,\n    a_message: str | None = None,\n) -&gt; \"Status\":\n  \"\"\"Alternative constructor that creates a Status object from a status code.\n\n  Args:\n      a_status_code: The status code.\n      a_message: An optional message describing the status.\n\n  Returns:\n      A Status object with the specified status code and message.\n  \"\"\"\n  return Status(a_status_code, a_message)\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Gets the string representation of the status.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>\"OK\" if the status is OK, otherwise the status code name and message.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def __str__(self) -&gt; str:\n  \"\"\"Gets the string representation of the status.\n\n  Returns:\n      str: \"OK\" if the status is OK, otherwise the status code name and message.\n  \"\"\"\n  if self.ok():\n    return \"OK\"\n  return (\n      f\"{self._status_code.name}: {self._message}\"\n      if self._message\n      else self._status_code.name\n  )\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.ok","title":"ok","text":"<pre><code>ok() -&gt; bool\n</code></pre> <p>Checks if the status is OK.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the status code is OK, False otherwise.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def ok(self) -&gt; bool:\n  \"\"\"Checks if the status is OK.\n\n  Returns:\n      bool: True if the status code is OK, False otherwise.\n  \"\"\"\n  return self._status_code == status_code.StatusCode.OK\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.status_code","title":"status_code","text":"<pre><code>status_code() -&gt; status_code.StatusCode\n</code></pre> <p>Gets the status code.</p> <p>Returns:</p> <ul> <li> <code>StatusCode</code>           \u2013            <p>The status code.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def status_code(self) -&gt; status_code.StatusCode:\n  \"\"\"Gets the status code.\n\n  Returns:\n    The status code.\n  \"\"\"\n  return self._status_code\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.message","title":"message","text":"<pre><code>message() -&gt; str | None\n</code></pre> <p>Gets the message.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The message.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def message(self) -&gt; str | None:\n  \"\"\"Gets the message.\n\n  Returns:\n    The message.\n  \"\"\"\n  return self._message\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.traceback","title":"traceback","text":"<pre><code>traceback() -&gt; str | None\n</code></pre> <p>Gets the traceback.</p> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def traceback(self) -&gt; str | None:\n  \"\"\"Gets the traceback.\"\"\"\n  return self._traceback\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.Status.set_traceback","title":"set_traceback","text":"<pre><code>set_traceback(a_traceback: str) -&gt; None\n</code></pre> <p>Sets the traceback for the status.</p> <p>Parameters:</p> <ul> <li> <code>a_traceback</code>               (<code>str</code>)           \u2013            <p>The traceback string.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def set_traceback(self, a_traceback: str) -&gt; None:\n  \"\"\"Sets the traceback for the status.\n\n  Args:\n      a_traceback: The traceback string.\n  \"\"\"\n  self._traceback = a_traceback\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.use_status","title":"use_status","text":"<pre><code>use_status(func: Callable[..., Any]) -&gt; Callable[..., Any | Status]\n</code></pre> <p>Decorator that wraps a function and converts exceptions to StatusOr objects.</p> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def use_status(func: Callable[..., Any]) -&gt; Callable[..., Any | Status]:\n  \"\"\"Decorator that wraps a function and converts exceptions to StatusOr objects.\"\"\"\n\n  @wraps(func)\n  def wrapper(*args: Any, **kwargs: Any) -&gt; Any | Status:\n    try:\n      return func(*args, **kwargs)\n    except Exception as e:\n      return Status.from_exception(e)\n\n  return wrapper\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.invalid_argument_error","title":"invalid_argument_error","text":"<pre><code>invalid_argument_error(message: str | None = None) -&gt; Status\n</code></pre> <p>Creates an invalid argument error status.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>An optional message describing the error.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code> (              <code>Status</code> )          \u2013            <p>A Status object with the INVALID_ARGUMENT error code and message.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def invalid_argument_error(message: str | None = None) -&gt; \"Status\":\n  \"\"\"Creates an invalid argument error status.\n\n  Args:\n      message (Optional[str]): An optional message describing the error.\n\n  Returns:\n      Status: A Status object with the INVALID_ARGUMENT error code and message.\n  \"\"\"\n  return Status(status_code.StatusCode.INVALID_ARGUMENT, message)\n</code></pre>"},{"location":"api_reference/base/status/status/#kern_comm_lib.base.status.status.not_found_error","title":"not_found_error","text":"<pre><code>not_found_error(message: str | None = None) -&gt; Status\n</code></pre> <p>Creates a not found error status.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>An optional message describing the error.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code> (              <code>Status</code> )          \u2013            <p>A Status object with the NOT_FOUND error code and message.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status.py</code> <pre><code>def not_found_error(message: str | None = None) -&gt; \"Status\":\n  \"\"\"Creates a not found error status.\n\n  Args:\n      message (Optional[str]): An optional message describing the error.\n\n  Returns:\n      Status: A Status object with the NOT_FOUND error code and message.\n  \"\"\"\n  return Status(status_code.StatusCode.NOT_FOUND, message)\n</code></pre>"},{"location":"api_reference/base/status/status_code/","title":"StatusCode","text":""},{"location":"api_reference/base/status/status_code/#kern_comm_lib.base.status.status_code--file-basestatusstatus_codepy","title":"File: base/status/status_code.py","text":"<p>This file contains the canonical status codes for the Kern - Common Python Libraries project.</p> <p>These status codes are used to represent the status of an operation instead of using exceptions.</p> <p>The status codes from 0 to 16 are the canonical error codes defined by Google. The status codes from 100 and above are the Python standard error codes. The Python standard error codes can be mapped to the corresponding Python exceptions.</p> <p>The status codes starting from 200 are custom error codes that can be defined freely by the user. Please subclass the StatusCode class and add any custom error codes you need.</p> <p>Classes:</p> <ul> <li> <code>StatusCode</code>           \u2013            <p>Status codes for the Status class.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_status_code_for_exception</code>             \u2013              <p>Maps a Python exception to the appropriate StatusCode.</p> </li> <li> <code>format_exception_traceback</code>             \u2013              <p>Formats an exception's traceback into a human-readable string.</p> </li> </ul>"},{"location":"api_reference/base/status/status_code/#kern_comm_lib.base.status.status_code.StatusCode","title":"StatusCode","text":"<p>               Bases: <code>IntEnum</code></p> <p>Status codes for the Status class.</p> <p>Includes Google canonical error codes (0-16), custom codes, and Python standard error codes (100+).</p> Source code in <code>kern_comm_lib/base/status/status_code.py</code> <pre><code>class StatusCode(enum.IntEnum):\n  \"\"\"Status codes for the Status class.\n\n  Includes Google canonical error codes (0-16), custom codes, and Python standard\n  error codes (100+).\n  \"\"\"\n\n  # &lt;editor-fold desc=\"Google canonical error codes\"&gt;\n  OK = 0\n  CANCELLED = 1\n  UNKNOWN = 2\n  INVALID_ARGUMENT = 3\n  DEADLINE_EXCEEDED = 4\n  NOT_FOUND = 5\n  ALREADY_EXISTS = 6\n  PERMISSION_DENIED = 7\n  RESOURCE_EXHAUSTED = 8\n  FAILED_PRECONDITION = 9\n  ABORTED = 10\n  OUT_OF_RANGE = 11\n  UNIMPLEMENTED = 12\n  INTERNAL = 13\n  UNAVAILABLE = 14\n  DATA_LOSS = 15\n  UNAUTHENTICATED = 16\n  # &lt;/editor-fold&gt;\n  # &lt;editor-fold desc=\"Python standard error codes (100+)\"&gt;\n  ARITHMETIC_ERROR = 100\n  ASSERTION_ERROR = 101\n  ATTRIBUTE_ERROR = 102\n  BLOCKING_IO_ERROR = 103\n  BROKEN_PIPE_ERROR = 104\n  BUFFER_ERROR = 105\n  CHILD_PROCESS_ERROR = 106\n  CONNECTION_ABORTED_ERROR = 107\n  CONNECTION_ERROR = 108\n  CONNECTION_REFUSED_ERROR = 109\n  CONNECTION_RESET_ERROR = 110\n  EOF_ERROR = 111\n  FILE_EXISTS_ERROR = 112\n  FILE_NOT_FOUND_ERROR = 113\n  FLOATING_POINT_ERROR = 114\n  GENERATOR_EXIT = 115\n  IMPORT_ERROR = 116\n  INDENTATION_ERROR = 117\n  INDEX_ERROR = 118\n  INTERRUPTED_ERROR = 119\n  IS_A_DIRECTORY_ERROR = 120\n  KEY_ERROR = 121\n  KEYBOARD_INTERRUPT = 122\n  LOOKUP_ERROR = 123\n  MEMORY_ERROR = 124\n  MODULE_NOT_FOUND_ERROR = 125\n  NAME_ERROR = 126\n  NOT_A_DIRECTORY_ERROR = 127\n  NOT_IMPLEMENTED_ERROR = 128\n  OS_ERROR = 129\n  OVERFLOW_ERROR = 130\n  PERMISSION_ERROR = 131\n  PROCESS_LOOKUP_ERROR = 132\n  RECURSION_ERROR = 133\n  REFERENCE_ERROR = 134\n  RUNTIME_ERROR = 135\n  STOP_ASYNC_ITERATION = 136\n  STOP_ITERATION = 137\n  SYNTAX_ERROR = 138\n  SYSTEM_ERROR = 139\n  SYSTEM_EXIT = 140\n  TAB_ERROR = 141\n  TIMEOUT_ERROR = 142\n  TYPE_ERROR = 143\n  UNBOUND_LOCAL_ERROR = 144\n  UNICODE_DECODE_ERROR = 145\n  UNICODE_ENCODE_ERROR = 146\n  UNICODE_ERROR = 147\n  UNICODE_TRANSLATE_ERROR = 148\n  VALUE_ERROR = 149\n  ZERO_DIVISION_ERROR = 150\n</code></pre>"},{"location":"api_reference/base/status/status_code/#kern_comm_lib.base.status.status_code.get_status_code_for_exception","title":"get_status_code_for_exception","text":"<pre><code>get_status_code_for_exception(exception: Exception) -&gt; StatusCode\n</code></pre> <p>Maps a Python exception to the appropriate StatusCode.</p> <p>Parameters:</p> <ul> <li> <code>exception</code>               (<code>Exception</code>)           \u2013            <p>The Python exception to map</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>StatusCode</code>           \u2013            <p>The corresponding StatusCode enum value</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_code.py</code> <pre><code>def get_status_code_for_exception(exception: Exception) -&gt; StatusCode:\n  \"\"\"Maps a Python exception to the appropriate StatusCode.\n\n  Args:\n      exception: The Python exception to map\n\n  Returns:\n      The corresponding StatusCode enum value\n  \"\"\"\n  exception_type = type(exception)\n  # Direct type lookup\n  if exception_type in EXCEPTION_TO_STATUS_CODE:\n    return EXCEPTION_TO_STATUS_CODE[exception_type]\n  # Try to find a parent exception class\n  for exc_type, code in EXCEPTION_TO_STATUS_CODE.items():\n    if isinstance(exception, exc_type):\n      return code\n  # Default fallback\n  return StatusCode.UNKNOWN\n</code></pre>"},{"location":"api_reference/base/status/status_code/#kern_comm_lib.base.status.status_code.format_exception_traceback","title":"format_exception_traceback","text":"<pre><code>format_exception_traceback(exception: Exception) -&gt; str\n</code></pre> <p>Formats an exception's traceback into a human-readable string.</p> <p>Parameters:</p> <ul> <li> <code>exception</code>               (<code>Exception</code>)           \u2013            <p>The Python exception to format</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A formatted string containing the traceback information</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_code.py</code> <pre><code>def format_exception_traceback(exception: Exception) -&gt; str:\n  \"\"\"Formats an exception's traceback into a human-readable string.\n\n  Args:\n      exception: The Python exception to format\n\n  Returns:\n      A formatted string containing the traceback information\n  \"\"\"\n  return \"\".join(\n      traceback.format_exception(\n          type(exception), exception, exception.__traceback__\n      )\n  )\n</code></pre>"},{"location":"api_reference/base/status/status_or/","title":"StatusOr","text":""},{"location":"api_reference/base/status/status_or/#kern_comm_lib.base.status.status_or--file-basestatusstatus_orpy","title":"File: base/status/status_or.py","text":"<p>This file contains the StatusOr class.</p> <p>A <code>kern.StatusOr</code> represents a class that holds a kern.Status object and a possible value of a certain type. The <code>kern.StatusOr</code> will either contain an object of a certain type (indicating a successful operation), or an error (of type <code>kern.Status</code>) explaining why such a value is not present.</p> <p>In general, check the success of an operation returning an <code>kern.StatusOr</code> like you would an <code>kern.Status</code> by using the <code>ok()</code> member function.</p> <p>Classes:</p> <ul> <li> <code>StatusOr</code>           \u2013            <p>A container class that wraps either a value of a specified type or a Status object.</p> </li> </ul>"},{"location":"api_reference/base/status/status_or/#kern_comm_lib.base.status.status_or.StatusOr","title":"StatusOr","text":"<p>A container class that wraps either a value of a specified type or a Status object.</p> <p>StatusOr is used to handle operations that might fail, allowing functions to return either a value or an error status. This pattern eliminates the need for exceptions in many cases and makes error handling more explicit.</p> <p>Attributes:</p> <ul> <li> <code>_type</code>               (<code>type</code>)           \u2013            <p>The expected type for the value.</p> </li> <li> <code>_val</code>               (<code>object | None</code>)           \u2013            <p>The value if the operation succeeded, None otherwise.</p> </li> <li> <code>_status</code>               (<code>Status</code>)           \u2013            <p>A Status object representing the operation result.   Will be an OK status if the operation succeeded.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Constructor.</p> </li> <li> <code>from_exception</code>             \u2013              <p>Alternative constructor that creates a StatusOr object from a Python exception.</p> </li> <li> <code>status</code>             \u2013              <p>Gets the Status object.</p> </li> <li> <code>val</code>             \u2013              <p>Gets the value.</p> </li> <li> <code>ok</code>             \u2013              <p>Checks if the StatusOr contains a valid value.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_or.py</code> <pre><code>class StatusOr:\n  \"\"\"A container class that wraps either a value of a specified type or a Status object.\n\n  StatusOr is used to handle operations that might fail, allowing functions to return\n  either a value or an error status. This pattern eliminates the need for exceptions\n  in many cases and makes error handling more explicit.\n\n  Attributes:\n    _type: The expected type for the value.\n    _val: The value if the operation succeeded, None otherwise.\n    _status: A Status object representing the operation result.\n        Will be an OK status if the operation succeeded.\n  \"\"\"\n\n  def __init__(\n      self, a_type: type, a_val_or_status: object | status.Status\n  ) -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n      a_type: The expected type for the value.\n      a_val_or_status: Either a value of type `a_type` or a Status object.\n          If a value is provided, it must match the specified type.\n          If a Status object is provided, it represents an error condition.\n\n    Raises:\n      SystemExit: If a value is provided that doesn't match the expected type.\n    \"\"\"\n    self._type: type = a_type\n    if isinstance(a_val_or_status, status.Status):\n      self._val: object | None = None\n      self._status: status.Status = a_val_or_status\n    else:\n      # Check if the val is of the correct type or None\n      if a_val_or_status is not None and not isinstance(\n          a_val_or_status, a_type\n      ):\n        print(\n            f\"Expected value of type {a_type.__name__}, got {type(a_val_or_status).__name__}\"\n        )\n        sys.exit(1)  # Crashes the program if the type is incorrect!\n      self._val = a_val_or_status\n      self._status = status.Status()\n\n  # &lt;editor-fold desc=\"Alternative constructors\"&gt;\n  @staticmethod\n  def from_exception(\n      exception: Exception, include_traceback: bool = True\n  ) -&gt; \"StatusOr\":\n    \"\"\"Alternative constructor that creates a StatusOr object from a Python exception.\n\n    Args:\n      exception: The Python exception.\n      include_traceback: Whether to include the exception's traceback.\n\n    Returns:\n        Status: A Status object with the appropriate status code, message, and optionally traceback.\n    \"\"\"\n    tmp_status = status.Status(\n        status_code.get_status_code_for_exception(exception), str(exception)\n    )\n    if include_traceback:\n      tmp_status.set_traceback(\n          status_code.format_exception_traceback(exception)\n      )\n    return StatusOr(None, tmp_status)  # type: ignore\n\n  # &lt;/editor-fold&gt;\n\n  # &lt;editor-fold desc=\"Public methods\"&gt;\n  # &lt;editor-fold desc=\"Getter\"&gt;\n  def status(self) -&gt; \"status.Status\":\n    \"\"\"Gets the Status object.\n\n    Returns:\n      The Status object representing the operation result.\n    \"\"\"\n    return self._status\n\n  def val(self) -&gt; object | None:\n    \"\"\"Gets the value.\n\n    Returns:\n      The value if the operation succeeded, None otherwise.\n    \"\"\"\n    return self._val\n\n  # &lt;/editor-fold&gt;\n\n  def ok(self) -&gt; bool:\n    \"\"\"Checks if the StatusOr contains a valid value.\n\n    Returns:\n        True if the StatusOr contains a valid value, False if it contains an error.\n    \"\"\"\n    return self._status.status_code() is status_code.StatusCode.OK\n</code></pre>"},{"location":"api_reference/base/status/status_or/#kern_comm_lib.base.status.status_or.StatusOr.__init__","title":"__init__","text":"<pre><code>__init__(a_type: type, a_val_or_status: object | Status) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> <ul> <li> <code>a_type</code>               (<code>type</code>)           \u2013            <p>The expected type for the value.</p> </li> <li> <code>a_val_or_status</code>               (<code>object | Status</code>)           \u2013            <p>Either a value of type <code>a_type</code> or a Status object.   If a value is provided, it must match the specified type.   If a Status object is provided, it represents an error condition.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>SystemExit</code>             \u2013            <p>If a value is provided that doesn't match the expected type.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_or.py</code> <pre><code>def __init__(\n    self, a_type: type, a_val_or_status: object | status.Status\n) -&gt; None:\n  \"\"\"Constructor.\n\n  Args:\n    a_type: The expected type for the value.\n    a_val_or_status: Either a value of type `a_type` or a Status object.\n        If a value is provided, it must match the specified type.\n        If a Status object is provided, it represents an error condition.\n\n  Raises:\n    SystemExit: If a value is provided that doesn't match the expected type.\n  \"\"\"\n  self._type: type = a_type\n  if isinstance(a_val_or_status, status.Status):\n    self._val: object | None = None\n    self._status: status.Status = a_val_or_status\n  else:\n    # Check if the val is of the correct type or None\n    if a_val_or_status is not None and not isinstance(\n        a_val_or_status, a_type\n    ):\n      print(\n          f\"Expected value of type {a_type.__name__}, got {type(a_val_or_status).__name__}\"\n      )\n      sys.exit(1)  # Crashes the program if the type is incorrect!\n    self._val = a_val_or_status\n    self._status = status.Status()\n</code></pre>"},{"location":"api_reference/base/status/status_or/#kern_comm_lib.base.status.status_or.StatusOr.from_exception","title":"from_exception  <code>staticmethod</code>","text":"<pre><code>from_exception(exception: Exception, include_traceback: bool = True) -&gt; StatusOr\n</code></pre> <p>Alternative constructor that creates a StatusOr object from a Python exception.</p> <p>Parameters:</p> <ul> <li> <code>exception</code>               (<code>Exception</code>)           \u2013            <p>The Python exception.</p> </li> <li> <code>include_traceback</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to include the exception's traceback.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code> (              <code>StatusOr</code> )          \u2013            <p>A Status object with the appropriate status code, message, and optionally traceback.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_or.py</code> <pre><code>@staticmethod\ndef from_exception(\n    exception: Exception, include_traceback: bool = True\n) -&gt; \"StatusOr\":\n  \"\"\"Alternative constructor that creates a StatusOr object from a Python exception.\n\n  Args:\n    exception: The Python exception.\n    include_traceback: Whether to include the exception's traceback.\n\n  Returns:\n      Status: A Status object with the appropriate status code, message, and optionally traceback.\n  \"\"\"\n  tmp_status = status.Status(\n      status_code.get_status_code_for_exception(exception), str(exception)\n  )\n  if include_traceback:\n    tmp_status.set_traceback(\n        status_code.format_exception_traceback(exception)\n    )\n  return StatusOr(None, tmp_status)  # type: ignore\n</code></pre>"},{"location":"api_reference/base/status/status_or/#kern_comm_lib.base.status.status_or.StatusOr.status","title":"status","text":"<pre><code>status() -&gt; status.Status\n</code></pre> <p>Gets the Status object.</p> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>The Status object representing the operation result.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_or.py</code> <pre><code>def status(self) -&gt; \"status.Status\":\n  \"\"\"Gets the Status object.\n\n  Returns:\n    The Status object representing the operation result.\n  \"\"\"\n  return self._status\n</code></pre>"},{"location":"api_reference/base/status/status_or/#kern_comm_lib.base.status.status_or.StatusOr.val","title":"val","text":"<pre><code>val() -&gt; object | None\n</code></pre> <p>Gets the value.</p> <p>Returns:</p> <ul> <li> <code>object | None</code>           \u2013            <p>The value if the operation succeeded, None otherwise.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_or.py</code> <pre><code>def val(self) -&gt; object | None:\n  \"\"\"Gets the value.\n\n  Returns:\n    The value if the operation succeeded, None otherwise.\n  \"\"\"\n  return self._val\n</code></pre>"},{"location":"api_reference/base/status/status_or/#kern_comm_lib.base.status.status_or.StatusOr.ok","title":"ok","text":"<pre><code>ok() -&gt; bool\n</code></pre> <p>Checks if the StatusOr contains a valid value.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the StatusOr contains a valid value, False if it contains an error.</p> </li> </ul> Source code in <code>kern_comm_lib/base/status/status_or.py</code> <pre><code>def ok(self) -&gt; bool:\n  \"\"\"Checks if the StatusOr contains a valid value.\n\n  Returns:\n      True if the StatusOr contains a valid value, False if it contains an error.\n  \"\"\"\n  return self._status.status_code() is status_code.StatusCode.OK\n</code></pre>"},{"location":"api_reference/base/threads/","title":"threads package","text":"<p>Modules:</p> <ul> <li> <code>mutex</code>           \u2013            </li> </ul>"},{"location":"api_reference/base/threads/mutex/","title":"Mutex","text":""},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex--file-threadsmutexpy","title":"File: threads/mutex.py","text":"<p>This file provides a framework-agnostic implementation of mutexes, allowing the use of different locking mechanisms depending on the threading framework (e.g., standard Python threading or PyQt6).</p> <p>Classes:</p> <ul> <li> <code>IMutex</code>           \u2013            <p>Abstract base class for mutex implementations.</p> </li> <li> <code>ThreadingMutex</code>           \u2013            <p>Lock implementation using Python's threading.RLock.</p> </li> <li> <code>QtMutex</code>           \u2013            <p>Lock implementation using PyQt6's QMutex.</p> </li> <li> <code>MutexFactory</code>           \u2013            <p>Factory class for creating mutex instances based on the selected implementation.</p> </li> </ul>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.IMutex","title":"IMutex","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for mutex implementations.</p> <p>Methods:</p> <ul> <li> <code>acquire</code>             \u2013              <p>Acquires the mutex.</p> </li> <li> <code>release</code>             \u2013              <p>Releases the mutex.</p> </li> <li> <code>__enter__</code>             \u2013              <p>Context manager entry method. Acquires the mutex.</p> </li> <li> <code>__exit__</code>             \u2013              <p>Context manager exit method. Releases the mutex.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>class IMutex(ABC):\n  \"\"\"Abstract base class for mutex implementations.\"\"\"\n\n  @abstractmethod\n  def acquire(\n      self, blocking: bool = True, timeout: float = -1\n  ) -&gt; AStatusOrElse[bool]:\n    \"\"\"Acquires the mutex.\n\n    Args:\n      blocking (default: True): Whether to block until the mutex is acquired.\n      timeout (default: -1): Maximum time to wait for the mutex in seconds.\n\n    Returns:\n      True if the mutex was acquired, False otherwise, if an error occurred\n      a Status object is returned.\n    \"\"\"\n    pass\n\n  @abstractmethod\n  def release(self) -&gt; Status:\n    \"\"\"Releases the mutex.\"\"\"\n    pass\n\n  def __enter__(self):\n    \"\"\"Context manager entry method. Acquires the mutex.\"\"\"\n    self.acquire()\n    return self\n\n  def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit method. Releases the mutex.\"\"\"\n    self.release()\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.IMutex.acquire","title":"acquire  <code>abstractmethod</code>","text":"<pre><code>acquire(blocking: bool = True, timeout: float = -1) -&gt; AStatusOrElse[bool]\n</code></pre> <p>Acquires the mutex.</p> <p>Parameters:</p> <ul> <li> <code>blocking</code>               (<code>default</code>, default:                   <code>True</code> )           \u2013            <p>True): Whether to block until the mutex is acquired.</p> </li> <li> <code>timeout</code>               (<code>default</code>, default:                   <code>-1</code> )           \u2013            <p>-1): Maximum time to wait for the mutex in seconds.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>True if the mutex was acquired, False otherwise, if an error occurred</p> </li> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>a Status object is returned.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>@abstractmethod\ndef acquire(\n    self, blocking: bool = True, timeout: float = -1\n) -&gt; AStatusOrElse[bool]:\n  \"\"\"Acquires the mutex.\n\n  Args:\n    blocking (default: True): Whether to block until the mutex is acquired.\n    timeout (default: -1): Maximum time to wait for the mutex in seconds.\n\n  Returns:\n    True if the mutex was acquired, False otherwise, if an error occurred\n    a Status object is returned.\n  \"\"\"\n  pass\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.IMutex.release","title":"release  <code>abstractmethod</code>","text":"<pre><code>release() -&gt; Status\n</code></pre> <p>Releases the mutex.</p> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>@abstractmethod\ndef release(self) -&gt; Status:\n  \"\"\"Releases the mutex.\"\"\"\n  pass\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.IMutex.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager entry method. Acquires the mutex.</p> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def __enter__(self):\n  \"\"\"Context manager entry method. Acquires the mutex.\"\"\"\n  self.acquire()\n  return self\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.IMutex.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre> <p>Context manager exit method. Releases the mutex.</p> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n  \"\"\"Context manager exit method. Releases the mutex.\"\"\"\n  self.release()\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.ThreadingMutex","title":"ThreadingMutex","text":"<p>               Bases: <code>IMutex</code></p> <p>Lock implementation using Python's threading.RLock.</p> <p>Attributes:</p> <ul> <li> <code>_mutex</code>               (<code>RLock</code>)           \u2013            <p>The underlying reentrant lock.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Initializes a new ThreadingMutex instance.</p> </li> <li> <code>acquire</code>             \u2013              <p>Acquires the mutex.</p> </li> <li> <code>release</code>             \u2013              <p>Releases the mutex.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>class ThreadingMutex(IMutex):\n  \"\"\"Lock implementation using Python's threading.RLock.\n\n  Attributes:\n    _mutex: The underlying reentrant lock.\n  \"\"\"\n\n  def __init__(self) -&gt; None:\n    \"\"\"Initializes a new ThreadingMutex instance.\"\"\"\n    self._mutex: threading.RLock = threading.RLock()\n\n  def acquire(\n      self, blocking: bool = True, timeout: float = -1\n  ) -&gt; AStatusOrElse[bool]:\n    \"\"\"Acquires the mutex.\n\n    Args:\n      blocking (default: True): Whether to block until the mutex is acquired.\n      timeout (default: -1): Maximum time to wait for the mutex in seconds.\n\n    Returns:\n      True if the mutex was acquired, False otherwise, if an error occurred\n      a Status object is returned.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    check.DCHECK_NOT_NONE(blocking)\n    check.DCHECK_NOT_NONE(timeout)\n    check.DCHECK_GREATER_THAN(timeout, 0)\n    # &lt;/editor-fold&gt;\n    try:\n      return self._mutex.acquire(blocking=blocking, timeout=timeout)\n    except Exception as e:\n      return Status.from_exception(e)\n\n  def release(self) -&gt; Status:\n    \"\"\"Releases the mutex.\n\n    Returns:\n      A Status object indicating success or failure of the operation.\n    \"\"\"\n    try:\n      self._mutex.release()\n      return Status()\n    except RuntimeError:\n      return Status.from_status_code(\n          StatusCode.FAILED_PRECONDITION,\n          \"Failed precondition: The mutex was not acquired.\",\n      )\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.ThreadingMutex.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Initializes a new ThreadingMutex instance.</p> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def __init__(self) -&gt; None:\n  \"\"\"Initializes a new ThreadingMutex instance.\"\"\"\n  self._mutex: threading.RLock = threading.RLock()\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.ThreadingMutex.acquire","title":"acquire","text":"<pre><code>acquire(blocking: bool = True, timeout: float = -1) -&gt; AStatusOrElse[bool]\n</code></pre> <p>Acquires the mutex.</p> <p>Parameters:</p> <ul> <li> <code>blocking</code>               (<code>default</code>, default:                   <code>True</code> )           \u2013            <p>True): Whether to block until the mutex is acquired.</p> </li> <li> <code>timeout</code>               (<code>default</code>, default:                   <code>-1</code> )           \u2013            <p>-1): Maximum time to wait for the mutex in seconds.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>True if the mutex was acquired, False otherwise, if an error occurred</p> </li> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>a Status object is returned.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def acquire(\n    self, blocking: bool = True, timeout: float = -1\n) -&gt; AStatusOrElse[bool]:\n  \"\"\"Acquires the mutex.\n\n  Args:\n    blocking (default: True): Whether to block until the mutex is acquired.\n    timeout (default: -1): Maximum time to wait for the mutex in seconds.\n\n  Returns:\n    True if the mutex was acquired, False otherwise, if an error occurred\n    a Status object is returned.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  check.DCHECK_NOT_NONE(blocking)\n  check.DCHECK_NOT_NONE(timeout)\n  check.DCHECK_GREATER_THAN(timeout, 0)\n  # &lt;/editor-fold&gt;\n  try:\n    return self._mutex.acquire(blocking=blocking, timeout=timeout)\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.ThreadingMutex.release","title":"release","text":"<pre><code>release() -&gt; Status\n</code></pre> <p>Releases the mutex.</p> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def release(self) -&gt; Status:\n  \"\"\"Releases the mutex.\n\n  Returns:\n    A Status object indicating success or failure of the operation.\n  \"\"\"\n  try:\n    self._mutex.release()\n    return Status()\n  except RuntimeError:\n    return Status.from_status_code(\n        StatusCode.FAILED_PRECONDITION,\n        \"Failed precondition: The mutex was not acquired.\",\n    )\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.QtMutex","title":"QtMutex","text":"<p>               Bases: <code>IMutex</code></p> <p>Lock implementation using PyQt6's QMutex.</p> <p>Attributes:</p> <ul> <li> <code>_mutex</code>               (<code>QMutex</code>)           \u2013            <p>The underlying PyQt6 mutex.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Initializes a new QtMutex instance.</p> </li> <li> <code>acquire</code>             \u2013              <p>Acquires the mutex.</p> </li> <li> <code>release</code>             \u2013              <p>Releases the mutex.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>class QtMutex(IMutex):\n  \"\"\"Lock implementation using PyQt6's QMutex.\n\n  Attributes:\n    _mutex: The underlying PyQt6 mutex.\n  \"\"\"\n\n  def __init__(self) -&gt; None:\n    \"\"\"Initializes a new QtMutex instance.\"\"\"\n    from PyQt6.QtCore import QMutex\n\n    self._mutex: QMutex = QMutex()\n\n  def acquire(\n      self, blocking: bool = True, timeout: float = -1\n  ) -&gt; AStatusOrElse[bool]:\n    \"\"\"Acquires the mutex.\n\n    Args:\n      blocking (default: True): Whether to block until the mutex is acquired.\n      timeout (default: -1): Maximum time to wait for the mutex in seconds.\n\n    Returns:\n      True if the mutex was acquired, False otherwise, if an error occurred\n      a Status object is returned.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    check.DCHECK_NOT_NONE(blocking)\n    check.DCHECK_NOT_NONE(timeout)\n    check.DCHECK_GREATER_THAN(timeout, 0)\n    # &lt;/editor-fold&gt;\n    try:\n      if timeout &gt; 0:\n        return self._mutex.tryLock(int(timeout * 1000))\n      elif blocking:\n        try:\n          self._mutex.lock()\n          return True\n        except Exception:\n          return Status.from_status_code(\n              StatusCode.UNKNOWN,\n              \"Unknown error occurred while acquiring the mutex while blocking=True.\",\n          )\n      else:\n        return self._mutex.tryLock()\n    except Exception as e:\n      return Status.from_exception(e)\n\n  def release(self) -&gt; Status:\n    \"\"\"Releases the mutex.\n\n    Returns:\n      A Status object indicating success or failure of the operation.\n    \"\"\"\n    try:\n      self._mutex.unlock()\n      return Status()\n    except RuntimeError:\n      return Status.from_status_code(\n          StatusCode.FAILED_PRECONDITION,\n          \"Failed precondition: The mutex was not acquired.\",\n      )\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.QtMutex.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Initializes a new QtMutex instance.</p> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def __init__(self) -&gt; None:\n  \"\"\"Initializes a new QtMutex instance.\"\"\"\n  from PyQt6.QtCore import QMutex\n\n  self._mutex: QMutex = QMutex()\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.QtMutex.acquire","title":"acquire","text":"<pre><code>acquire(blocking: bool = True, timeout: float = -1) -&gt; AStatusOrElse[bool]\n</code></pre> <p>Acquires the mutex.</p> <p>Parameters:</p> <ul> <li> <code>blocking</code>               (<code>default</code>, default:                   <code>True</code> )           \u2013            <p>True): Whether to block until the mutex is acquired.</p> </li> <li> <code>timeout</code>               (<code>default</code>, default:                   <code>-1</code> )           \u2013            <p>-1): Maximum time to wait for the mutex in seconds.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>True if the mutex was acquired, False otherwise, if an error occurred</p> </li> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>a Status object is returned.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def acquire(\n    self, blocking: bool = True, timeout: float = -1\n) -&gt; AStatusOrElse[bool]:\n  \"\"\"Acquires the mutex.\n\n  Args:\n    blocking (default: True): Whether to block until the mutex is acquired.\n    timeout (default: -1): Maximum time to wait for the mutex in seconds.\n\n  Returns:\n    True if the mutex was acquired, False otherwise, if an error occurred\n    a Status object is returned.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  check.DCHECK_NOT_NONE(blocking)\n  check.DCHECK_NOT_NONE(timeout)\n  check.DCHECK_GREATER_THAN(timeout, 0)\n  # &lt;/editor-fold&gt;\n  try:\n    if timeout &gt; 0:\n      return self._mutex.tryLock(int(timeout * 1000))\n    elif blocking:\n      try:\n        self._mutex.lock()\n        return True\n      except Exception:\n        return Status.from_status_code(\n            StatusCode.UNKNOWN,\n            \"Unknown error occurred while acquiring the mutex while blocking=True.\",\n        )\n    else:\n      return self._mutex.tryLock()\n  except Exception as e:\n    return Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.QtMutex.release","title":"release","text":"<pre><code>release() -&gt; Status\n</code></pre> <p>Releases the mutex.</p> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure of the operation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>def release(self) -&gt; Status:\n  \"\"\"Releases the mutex.\n\n  Returns:\n    A Status object indicating success or failure of the operation.\n  \"\"\"\n  try:\n    self._mutex.unlock()\n    return Status()\n  except RuntimeError:\n    return Status.from_status_code(\n        StatusCode.FAILED_PRECONDITION,\n        \"Failed precondition: The mutex was not acquired.\",\n    )\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.MutexFactory","title":"MutexFactory","text":"<p>Factory class for creating mutex instances based on the selected implementation.</p> <p>Attributes:</p> <ul> <li> <code>_mutex_class</code>               (<code>type[IMutex]</code>)           \u2013            <p>The class to use for creating mutex instances.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>set_mutex_implementation</code>             \u2013              <p>Sets the mutex implementation to use.</p> </li> <li> <code>create_mutex</code>             \u2013              <p>Creates a new mutex instance using the selected implementation.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>class MutexFactory:\n  \"\"\"Factory class for creating mutex instances based on the selected implementation.\n\n  Attributes:\n    _mutex_class: The class to use for creating mutex instances.\n  \"\"\"\n\n  _mutex_class: type[IMutex] = ThreadingMutex\n\n  @classmethod\n  def set_mutex_implementation(cls, lock_class: type[IMutex]) -&gt; None:\n    \"\"\"Sets the mutex implementation to use.\n\n    Args:\n      lock_class: The mutex class to use for creating instances.\n    \"\"\"\n    cls._mutex_class = lock_class\n\n  @classmethod\n  def create_mutex(cls) -&gt; IMutex:\n    \"\"\"Creates a new mutex instance using the selected implementation.\n\n    Returns:\n      A new mutex instance.\n    \"\"\"\n    return cls._mutex_class()\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.MutexFactory.set_mutex_implementation","title":"set_mutex_implementation  <code>classmethod</code>","text":"<pre><code>set_mutex_implementation(lock_class: type[IMutex]) -&gt; None\n</code></pre> <p>Sets the mutex implementation to use.</p> <p>Parameters:</p> <ul> <li> <code>lock_class</code>               (<code>type[IMutex]</code>)           \u2013            <p>The mutex class to use for creating instances.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>@classmethod\ndef set_mutex_implementation(cls, lock_class: type[IMutex]) -&gt; None:\n  \"\"\"Sets the mutex implementation to use.\n\n  Args:\n    lock_class: The mutex class to use for creating instances.\n  \"\"\"\n  cls._mutex_class = lock_class\n</code></pre>"},{"location":"api_reference/base/threads/mutex/#kern_comm_lib.base.threads.mutex.MutexFactory.create_mutex","title":"create_mutex  <code>classmethod</code>","text":"<pre><code>create_mutex() -&gt; IMutex\n</code></pre> <p>Creates a new mutex instance using the selected implementation.</p> <p>Returns:</p> <ul> <li> <code>IMutex</code>           \u2013            <p>A new mutex instance.</p> </li> </ul> Source code in <code>kern_comm_lib/base/threads/mutex.py</code> <pre><code>@classmethod\ndef create_mutex(cls) -&gt; IMutex:\n  \"\"\"Creates a new mutex instance using the selected implementation.\n\n  Returns:\n    A new mutex instance.\n  \"\"\"\n  return cls._mutex_class()\n</code></pre>"},{"location":"api_reference/filesystem/","title":"filesystem package","text":""},{"location":"api_reference/filesystem/#kern_comm_lib.filesystem--file-filesysteminitpy","title":"File: filesystem/init.py","text":"<p>This file defines the public API of the filesystem package.</p> <p>Modules:</p> <ul> <li> <code>kpath</code>           \u2013            </li> </ul>"},{"location":"api_reference/filesystem/kpath/","title":"Kpath","text":""},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath--file-filesystemkpathpy","title":"File: filesystem/kpath.py","text":"<p>The pathlib.Path class is commonly used for file and directory operations in Python. To provide a consistent interface for file system operations, that does not use exceptions, a wrapper class is created called KPath. This class wraps the pathlib.Path class and provides methods for file and directory operations, such as creating directories, reading and writing files, and checking file existence. The KPath class also provides a way to set file permissions using the FilesystemModes enum.</p> <p>The interface of the KPath class is kept very similar to the pathlib.Path class to enable a drop-in replacement. Therefore, the migration to the KPath class is straightforward.</p> <p>The class uses the DCHECK_ functions from the <code>base.log.check</code> module to do any argument checks. To disable the checks, the -O flag needs to be set when running the Python interpreter.</p> <p>Classes:</p> <ul> <li> <code>FilesystemModes</code>           \u2013            <p>Enum for file and directory permissions.</p> </li> <li> <code>KPath</code>           \u2013            <p>Path class that wraps pathlib.Path and returns status objects instead of raising exceptions.</p> </li> </ul>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes","title":"FilesystemModes","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum for file and directory permissions.</p> <p>Attributes:</p> <ul> <li> <code>ALL_RWX</code>           \u2013            <p>Full permissions (read, write, execute) for owner, group, and others</p> </li> <li> <code>ALL_RW</code>           \u2013            <p>Read and write permissions for owner, group, and others</p> </li> <li> <code>OWNER_RWX_OTHERS_RX</code>           \u2013            <p>Owner has full permissions, group and others can read/execute</p> </li> <li> <code>ONLY_OWNER_RWX</code>           \u2013            <p>Owner has full permissions, no permissions for group or others</p> </li> <li> <code>OWNER_RW_OTHERS_R</code>           \u2013            <p>Owner can read/write, group and others can only read</p> </li> <li> <code>ONLY_OWNER_RW</code>           \u2013            <p>Owner can read/write, no permissions for group or others</p> </li> <li> <code>ALL_R</code>           \u2013            <p>Read-only permissions for owner, group, and others</p> </li> <li> <code>ONLY_OWNER_R</code>           \u2013            <p>Read-only permissions for owner only</p> </li> <li> <code>OWNER_RWX_GROUP_RX</code>           \u2013            <p>Owner has full permissions, group can read/execute, others have no permissions</p> </li> <li> <code>OWNER_GROUP_RWX</code>           \u2013            <p>Owner and group have full permissions, others have no permissions</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>class FilesystemModes(enum.IntEnum):\n  \"\"\"Enum for file and directory permissions.\"\"\"\n\n  ALL_RWX = 0o777\n  \"\"\"Full permissions (read, write, execute) for owner, group, and others\"\"\"\n  ALL_RW = 0o666\n  \"\"\"Read and write permissions for owner, group, and others\"\"\"\n  OWNER_RWX_OTHERS_RX = 0o755\n  \"\"\"Owner has full permissions, group and others can read/execute\"\"\"\n  ONLY_OWNER_RWX = 0o700\n  \"\"\"Owner has full permissions, no permissions for group or others\"\"\"\n  OWNER_RW_OTHERS_R = 0o644\n  \"\"\"Owner can read/write, group and others can only read\"\"\"\n  ONLY_OWNER_RW = 0o600\n  \"\"\"Owner can read/write, no permissions for group or others\"\"\"\n  ALL_R = 0o444\n  \"\"\"Read-only permissions for owner, group, and others\"\"\"\n  ONLY_OWNER_R = 0o400\n  \"\"\"Read-only permissions for owner only\"\"\"\n  OWNER_RWX_GROUP_RX = 0o750\n  \"\"\"Owner has full permissions, group can read/execute, others have no permissions\"\"\"\n  OWNER_GROUP_RWX = 0o770\n  \"\"\"Owner and group have full permissions, others have no permissions\"\"\"\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.ALL_RWX","title":"ALL_RWX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALL_RWX = 511\n</code></pre> <p>Full permissions (read, write, execute) for owner, group, and others</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.ALL_RW","title":"ALL_RW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALL_RW = 438\n</code></pre> <p>Read and write permissions for owner, group, and others</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.OWNER_RWX_OTHERS_RX","title":"OWNER_RWX_OTHERS_RX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OWNER_RWX_OTHERS_RX = 493\n</code></pre> <p>Owner has full permissions, group and others can read/execute</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.ONLY_OWNER_RWX","title":"ONLY_OWNER_RWX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ONLY_OWNER_RWX = 448\n</code></pre> <p>Owner has full permissions, no permissions for group or others</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.OWNER_RW_OTHERS_R","title":"OWNER_RW_OTHERS_R  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OWNER_RW_OTHERS_R = 420\n</code></pre> <p>Owner can read/write, group and others can only read</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.ONLY_OWNER_RW","title":"ONLY_OWNER_RW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ONLY_OWNER_RW = 384\n</code></pre> <p>Owner can read/write, no permissions for group or others</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.ALL_R","title":"ALL_R  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALL_R = 292\n</code></pre> <p>Read-only permissions for owner, group, and others</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.ONLY_OWNER_R","title":"ONLY_OWNER_R  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ONLY_OWNER_R = 256\n</code></pre> <p>Read-only permissions for owner only</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.OWNER_RWX_GROUP_RX","title":"OWNER_RWX_GROUP_RX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OWNER_RWX_GROUP_RX = 488\n</code></pre> <p>Owner has full permissions, group can read/execute, others have no permissions</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.FilesystemModes.OWNER_GROUP_RWX","title":"OWNER_GROUP_RWX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OWNER_GROUP_RWX = 504\n</code></pre> <p>Owner and group have full permissions, others have no permissions</p>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath","title":"KPath","text":"<p>Path class that wraps pathlib.Path and returns status objects instead of raising exceptions.</p> <p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              <p>Constructor.</p> </li> <li> <code>__str__</code>             \u2013              <p>Returns the string representation of the path.</p> </li> <li> <code>__repr__</code>             \u2013              <p>Returns the representation of the path.</p> </li> <li> <code>exists</code>             \u2013              <p>Checks if the path exists.</p> </li> <li> <code>is_file</code>             \u2013              <p>Checks if the path is a file.</p> </li> <li> <code>is_dir</code>             \u2013              <p>Checks if the path is a directory.</p> </li> <li> <code>mkdir</code>             \u2013              <p>Creates a directory at this path.</p> </li> <li> <code>rmdir</code>             \u2013              <p>Removes this directory.</p> </li> <li> <code>touch</code>             \u2013              <p>Creates a file at this path.</p> </li> <li> <code>unlink</code>             \u2013              <p>Removes this file or symbolic link.</p> </li> <li> <code>read_bytes</code>             \u2013              <p>Reads bytes from this file.</p> </li> <li> <code>read_text</code>             \u2013              <p>Reads text from this file.</p> </li> <li> <code>write_bytes</code>             \u2013              <p>Writes bytes to this file.</p> </li> <li> <code>write_text</code>             \u2013              <p>Writes text to this file.</p> </li> <li> <code>iterdir</code>             \u2013              <p>Iterates over the files in this directory.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>Gets the underlying pathlib.Path object.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Gets the name of the file or directory.</p> </li> <li> <code>parent</code>               (<code>KPath</code>)           \u2013            <p>Gets the parent directory as KPath.</p> </li> <li> <code>suffix</code>               (<code>str</code>)           \u2013            <p>Gets the file extension.</p> </li> <li> <code>stem</code>               (<code>str</code>)           \u2013            <p>Gets the filename without extension.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>class KPath:\n  \"\"\"Path class that wraps pathlib.Path and returns status objects instead of raising exceptions.\"\"\"\n\n  def __init__(self, a_path: Union[str, pathlib.Path, \"KPath\"]) -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n      a_path: The path to wrap. Can be a string, pathlib.Path, or another KPath object.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(a_path)\n    # &lt;/editor-fold&gt;\n    # If the path is a string or a KPath object, it has to be converted\n    # to a pathlib.Path object because KPath is a wrapper around pathlib.Path.\n    if isinstance(a_path, str):\n      self._path: pathlib.Path = pathlib.Path(a_path)\n    elif isinstance(a_path, KPath):\n      self._path: pathlib.Path = pathlib.Path(a_path.path)\n    else:\n      self._path: pathlib.Path = a_path\n\n  # &lt;editor-fold desc=\"Magic methods\"&gt;\n  def __str__(self) -&gt; str:\n    \"\"\"Returns the string representation of the path.\n\n    Returns:\n      The string representation of the path.\n    \"\"\"\n    return str(self._path)\n\n  def __repr__(self) -&gt; str:\n    \"\"\"Returns the representation of the path.\n\n    Returns:\n      The representation of the path.\n    \"\"\"\n    return f\"KPath({repr(self._path)})\"\n\n  # &lt;/editor-fold&gt;\n\n  # &lt;editor-fold desc=\"Getter methods\"&gt;\n  @property\n  def path(self) -&gt; pathlib.Path:\n    \"\"\"Gets the underlying pathlib.Path object.\n\n    Returns:\n      The underlying pathlib.Path object.\n    \"\"\"\n    return self._path\n\n  @property\n  def name(self) -&gt; str:\n    \"\"\"Gets the name of the file or directory.\n\n    Returns:\n      The name of the file or directory\n    \"\"\"\n    return self._path.name\n\n  @property\n  def parent(self) -&gt; \"KPath\":\n    \"\"\"Gets the parent directory as KPath.\n\n    Returns:\n      The parent directory as a KPath object.\n    \"\"\"\n    return KPath(self._path.parent)\n\n  @property\n  def suffix(self) -&gt; str:\n    \"\"\"Gets the file extension.\n\n    Returns:\n      The file extension.\n    \"\"\"\n    return self._path.suffix\n\n  @property\n  def stem(self) -&gt; str:\n    \"\"\"Gets the filename without extension.\n\n    Returns:\n      The filename without extension.\n    \"\"\"\n    return self._path.stem\n\n  # &lt;/editor-fold&gt;\n\n  def exists(self) -&gt; kern.AStatusOrElse[bool]:\n    \"\"\"Checks if the path exists.\n\n    Returns:\n      Either True if the path exists or False if it doesn't, otherwise a Status object containing an error status.\n    \"\"\"\n    try:\n      return self._path.exists()\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def is_file(self) -&gt; kern.AStatusOrElse[bool]:\n    \"\"\"Checks if the path is a file.\n\n    Returns:\n      Either True if the path is a file or False if it doesn't, otherwise a Status object containing an error status.\n    \"\"\"\n    try:\n      return self._path.is_file()\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def is_dir(self) -&gt; kern.AStatusOrElse[bool]:\n    \"\"\"Checks if the path is a directory.\n\n    Returns:\n      Either True if the path is a directory or False if it doesn't, otherwise a Status object containing an error status.\n    \"\"\"\n    try:\n      return self._path.is_dir()\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  # Path operations\n\n  def mkdir(\n      self, mode: int = 0o777, parents: bool = False, exist_ok: bool = False\n  ) -&gt; kern.Status:\n    \"\"\"Creates a directory at this path.\n\n    Args:\n      mode (default: 0o777): The mode for the new directory (default is 0o777).\n      parents (default: False): If True, create parent directories as needed (default is False).\n      exist_ok (default: False): If True, do not raise an error if the directory already exists (default is False).\n\n    Returns:\n        A Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(mode)\n    kern.DCHECK_IN_ENUM(mode, FilesystemModes)\n    kern.DCHECK_NOT_NONE(parents)\n    kern.DCHECK_NOT_NONE(exist_ok)\n    # &lt;/editor-fold&gt;\n    try:\n      self._path.mkdir(mode=mode, parents=parents, exist_ok=exist_ok)\n      return kern.Status()\n    except FileExistsError:\n      return kern.Status.from_status_code(\n          kern.StatusCode.ALREADY_EXISTS,\n          f\"Directory already exists: {self._path}\",\n      )\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def rmdir(self, recursive: bool = False) -&gt; kern.Status:\n    \"\"\"Removes this directory.\n\n    Args:\n        recursive (default: False): If True, removes directory with all its contents. If False, directory must be empty.\n\n    Returns:\n      Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(recursive)\n    # &lt;/editor-fold&gt;\n\n    try:\n      if recursive:\n        shutil.rmtree(str(self._path))\n      else:\n        self._path.rmdir()\n      return kern.Status()\n    except FileNotFoundError:\n      return kern.status.not_found_error(f\"Directory not found: {self._path}\")\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def touch(self, mode: int = 0o666, exist_ok: bool = True) -&gt; kern.Status:\n    \"\"\"Creates a file at this path.\n\n    Args:\n        mode: The mode for the new file (default is 0o666).\n        exist_ok (default: True): If True, do not raise an error if the file already exists.\n\n    Returns:\n      Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(mode)\n    kern.DCHECK_IN_ENUM(mode, FilesystemModes)\n    kern.DCHECK_NOT_NONE(exist_ok)\n    # &lt;/editor-fold&gt;\n    try:\n      self._path.touch(mode=mode, exist_ok=exist_ok)\n      return kern.Status()\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def unlink(self, missing_ok: bool = False) -&gt; kern.Status:\n    \"\"\"Removes this file or symbolic link.\n\n    Args:\n        missing_ok (default: False): If True, do not raise an error if the file does not exist.\n\n    Returns:\n      Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(missing_ok)\n    # &lt;/editor-fold&gt;\n    try:\n      self._path.unlink(missing_ok=missing_ok)\n      return kern.Status()\n    except FileNotFoundError:\n      if missing_ok:\n        return kern.Status()\n      return kern.status.not_found_error(f\"File not found: {self._path}\")\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  # File content operations\n\n  def read_bytes(self) -&gt; kern.AStatusOrElse[bytes]:\n    \"\"\"Reads bytes from this file.\n\n    Returns:\n      Either a bytes object or a Status object containing an error status.\n    \"\"\"\n    try:\n      return self._path.read_bytes()\n    except FileNotFoundError:\n      return kern.status.not_found_error(f\"File not found: {self._path}\")\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def read_text(\n      self, encoding: str = \"utf-8\", errors: str | None = None\n  ) -&gt; kern.AStatusOrElse[str]:\n    \"\"\"Reads text from this file.\n\n    Args:\n      encoding (default: utf-8): The encoding to use.\n      errors (default: None): How to handle encoding errors.\n\n    Returns:\n      Either a string of text or a Status object containing an error status.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(encoding)\n    kern.DCHECK_NOT_EQ(encoding, \"\")\n    # TODO: Add check for the errors argument! Is an empty string valid?\n    # &lt;/editor-fold&gt;\n    try:\n      return self._path.read_text(encoding=encoding, errors=errors)\n    except FileNotFoundError:\n      return kern.status.not_found_error(f\"File not found: {self._path}\")\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def write_bytes(self, data: bytes) -&gt; kern.Status:\n    \"\"\"Writes bytes to this file.\n\n    Args:\n      data: The data in bytes to write.\n\n    Returns:\n      A Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(data)\n    # &lt;/editor-fold&gt;\n    try:\n      self._path.write_bytes(data)\n      return kern.Status()\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  def write_text(\n      self, data: str, encoding: str = \"utf-8\", errors: str | None = None\n  ) -&gt; kern.Status:\n    \"\"\"Writes text to this file.\n\n    Args:\n      data: The data as text to write.\n      encoding (default: utf-8): The encoding to use.\n      errors (default: None): How to handle encoding errors.\n\n    Returns:\n      A Status object indicating success or failure.\n    \"\"\"\n    # &lt;editor-fold desc=\"Checks\"&gt;\n    kern.DCHECK_NOT_NONE(data)\n    kern.DCHECK_NOT_NONE(encoding)\n    kern.DCHECK_NOT_EQ(encoding, \"\")\n    # TODO: Add check for the errors argument! Is an empty string valid?\n    # &lt;/editor-fold&gt;\n    try:\n      self._path.write_text(data, encoding=encoding, errors=errors)\n      return kern.Status()\n    except Exception as e:\n      return kern.Status.from_exception(e)\n\n  # Directory operations\n\n  def iterdir(self) -&gt; kern.AStatusOrElse[list[\"KPath\"]]:\n    \"\"\"Iterates over the files in this directory.\n\n    Returns:\n      Either a Python list of KPath objects or a Status object containing an error status.\n    \"\"\"\n    try:\n      return [KPath(path) for path in self._path.iterdir()]\n    except FileNotFoundError:\n      return kern.status.not_found_error(f\"Directory not found: {self._path}\")\n    except NotADirectoryError:\n      return kern.status.invalid_argument_error(\n          f\"Not a directory: {self._path}\"\n      )\n    except Exception as e:\n      return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.path","title":"path  <code>property</code>","text":"<pre><code>path: Path\n</code></pre> <p>Gets the underlying pathlib.Path object.</p> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The underlying pathlib.Path object.</p> </li> </ul>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of the file or directory.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The name of the file or directory</p> </li> </ul>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.parent","title":"parent  <code>property</code>","text":"<pre><code>parent: KPath\n</code></pre> <p>Gets the parent directory as KPath.</p> <p>Returns:</p> <ul> <li> <code>KPath</code>           \u2013            <p>The parent directory as a KPath object.</p> </li> </ul>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.suffix","title":"suffix  <code>property</code>","text":"<pre><code>suffix: str\n</code></pre> <p>Gets the file extension.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The file extension.</p> </li> </ul>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.stem","title":"stem  <code>property</code>","text":"<pre><code>stem: str\n</code></pre> <p>Gets the filename without extension.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The filename without extension.</p> </li> </ul>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.__init__","title":"__init__","text":"<pre><code>__init__(a_path: Union[str, Path, KPath]) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> <ul> <li> <code>a_path</code>               (<code>Union[str, Path, KPath]</code>)           \u2013            <p>The path to wrap. Can be a string, pathlib.Path, or another KPath object.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def __init__(self, a_path: Union[str, pathlib.Path, \"KPath\"]) -&gt; None:\n  \"\"\"Constructor.\n\n  Args:\n    a_path: The path to wrap. Can be a string, pathlib.Path, or another KPath object.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(a_path)\n  # &lt;/editor-fold&gt;\n  # If the path is a string or a KPath object, it has to be converted\n  # to a pathlib.Path object because KPath is a wrapper around pathlib.Path.\n  if isinstance(a_path, str):\n    self._path: pathlib.Path = pathlib.Path(a_path)\n  elif isinstance(a_path, KPath):\n    self._path: pathlib.Path = pathlib.Path(a_path.path)\n  else:\n    self._path: pathlib.Path = a_path\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Returns the string representation of the path.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string representation of the path.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def __str__(self) -&gt; str:\n  \"\"\"Returns the string representation of the path.\n\n  Returns:\n    The string representation of the path.\n  \"\"\"\n  return str(self._path)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Returns the representation of the path.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The representation of the path.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def __repr__(self) -&gt; str:\n  \"\"\"Returns the representation of the path.\n\n  Returns:\n    The representation of the path.\n  \"\"\"\n  return f\"KPath({repr(self._path)})\"\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.exists","title":"exists","text":"<pre><code>exists() -&gt; kern.AStatusOrElse[bool]\n</code></pre> <p>Checks if the path exists.</p> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>Either True if the path exists or False if it doesn't, otherwise a Status object containing an error status.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def exists(self) -&gt; kern.AStatusOrElse[bool]:\n  \"\"\"Checks if the path exists.\n\n  Returns:\n    Either True if the path exists or False if it doesn't, otherwise a Status object containing an error status.\n  \"\"\"\n  try:\n    return self._path.exists()\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.is_file","title":"is_file","text":"<pre><code>is_file() -&gt; kern.AStatusOrElse[bool]\n</code></pre> <p>Checks if the path is a file.</p> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>Either True if the path is a file or False if it doesn't, otherwise a Status object containing an error status.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def is_file(self) -&gt; kern.AStatusOrElse[bool]:\n  \"\"\"Checks if the path is a file.\n\n  Returns:\n    Either True if the path is a file or False if it doesn't, otherwise a Status object containing an error status.\n  \"\"\"\n  try:\n    return self._path.is_file()\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.is_dir","title":"is_dir","text":"<pre><code>is_dir() -&gt; kern.AStatusOrElse[bool]\n</code></pre> <p>Checks if the path is a directory.</p> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[bool]</code>           \u2013            <p>Either True if the path is a directory or False if it doesn't, otherwise a Status object containing an error status.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def is_dir(self) -&gt; kern.AStatusOrElse[bool]:\n  \"\"\"Checks if the path is a directory.\n\n  Returns:\n    Either True if the path is a directory or False if it doesn't, otherwise a Status object containing an error status.\n  \"\"\"\n  try:\n    return self._path.is_dir()\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.mkdir","title":"mkdir","text":"<pre><code>mkdir(mode: int = 511, parents: bool = False, exist_ok: bool = False) -&gt; kern.Status\n</code></pre> <p>Creates a directory at this path.</p> <p>Parameters:</p> <ul> <li> <code>mode</code>               (<code>default</code>, default:                   <code>511</code> )           \u2013            <p>0o777): The mode for the new directory (default is 0o777).</p> </li> <li> <code>parents</code>               (<code>default</code>, default:                   <code>False</code> )           \u2013            <p>False): If True, create parent directories as needed (default is False).</p> </li> <li> <code>exist_ok</code>               (<code>default</code>, default:                   <code>False</code> )           \u2013            <p>False): If True, do not raise an error if the directory already exists (default is False).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def mkdir(\n    self, mode: int = 0o777, parents: bool = False, exist_ok: bool = False\n) -&gt; kern.Status:\n  \"\"\"Creates a directory at this path.\n\n  Args:\n    mode (default: 0o777): The mode for the new directory (default is 0o777).\n    parents (default: False): If True, create parent directories as needed (default is False).\n    exist_ok (default: False): If True, do not raise an error if the directory already exists (default is False).\n\n  Returns:\n      A Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(mode)\n  kern.DCHECK_IN_ENUM(mode, FilesystemModes)\n  kern.DCHECK_NOT_NONE(parents)\n  kern.DCHECK_NOT_NONE(exist_ok)\n  # &lt;/editor-fold&gt;\n  try:\n    self._path.mkdir(mode=mode, parents=parents, exist_ok=exist_ok)\n    return kern.Status()\n  except FileExistsError:\n    return kern.Status.from_status_code(\n        kern.StatusCode.ALREADY_EXISTS,\n        f\"Directory already exists: {self._path}\",\n    )\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.rmdir","title":"rmdir","text":"<pre><code>rmdir(recursive: bool = False) -&gt; kern.Status\n</code></pre> <p>Removes this directory.</p> <p>Parameters:</p> <ul> <li> <code>recursive</code>               (<code>default</code>, default:                   <code>False</code> )           \u2013            <p>False): If True, removes directory with all its contents. If False, directory must be empty.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def rmdir(self, recursive: bool = False) -&gt; kern.Status:\n  \"\"\"Removes this directory.\n\n  Args:\n      recursive (default: False): If True, removes directory with all its contents. If False, directory must be empty.\n\n  Returns:\n    Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(recursive)\n  # &lt;/editor-fold&gt;\n\n  try:\n    if recursive:\n      shutil.rmtree(str(self._path))\n    else:\n      self._path.rmdir()\n    return kern.Status()\n  except FileNotFoundError:\n    return kern.status.not_found_error(f\"Directory not found: {self._path}\")\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.touch","title":"touch","text":"<pre><code>touch(mode: int = 438, exist_ok: bool = True) -&gt; kern.Status\n</code></pre> <p>Creates a file at this path.</p> <p>Parameters:</p> <ul> <li> <code>mode</code>               (<code>int</code>, default:                   <code>438</code> )           \u2013            <p>The mode for the new file (default is 0o666).</p> </li> <li> <code>exist_ok</code>               (<code>default</code>, default:                   <code>True</code> )           \u2013            <p>True): If True, do not raise an error if the file already exists.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def touch(self, mode: int = 0o666, exist_ok: bool = True) -&gt; kern.Status:\n  \"\"\"Creates a file at this path.\n\n  Args:\n      mode: The mode for the new file (default is 0o666).\n      exist_ok (default: True): If True, do not raise an error if the file already exists.\n\n  Returns:\n    Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(mode)\n  kern.DCHECK_IN_ENUM(mode, FilesystemModes)\n  kern.DCHECK_NOT_NONE(exist_ok)\n  # &lt;/editor-fold&gt;\n  try:\n    self._path.touch(mode=mode, exist_ok=exist_ok)\n    return kern.Status()\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.unlink","title":"unlink","text":"<pre><code>unlink(missing_ok: bool = False) -&gt; kern.Status\n</code></pre> <p>Removes this file or symbolic link.</p> <p>Parameters:</p> <ul> <li> <code>missing_ok</code>               (<code>default</code>, default:                   <code>False</code> )           \u2013            <p>False): If True, do not raise an error if the file does not exist.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def unlink(self, missing_ok: bool = False) -&gt; kern.Status:\n  \"\"\"Removes this file or symbolic link.\n\n  Args:\n      missing_ok (default: False): If True, do not raise an error if the file does not exist.\n\n  Returns:\n    Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(missing_ok)\n  # &lt;/editor-fold&gt;\n  try:\n    self._path.unlink(missing_ok=missing_ok)\n    return kern.Status()\n  except FileNotFoundError:\n    if missing_ok:\n      return kern.Status()\n    return kern.status.not_found_error(f\"File not found: {self._path}\")\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.read_bytes","title":"read_bytes","text":"<pre><code>read_bytes() -&gt; kern.AStatusOrElse[bytes]\n</code></pre> <p>Reads bytes from this file.</p> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[bytes]</code>           \u2013            <p>Either a bytes object or a Status object containing an error status.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def read_bytes(self) -&gt; kern.AStatusOrElse[bytes]:\n  \"\"\"Reads bytes from this file.\n\n  Returns:\n    Either a bytes object or a Status object containing an error status.\n  \"\"\"\n  try:\n    return self._path.read_bytes()\n  except FileNotFoundError:\n    return kern.status.not_found_error(f\"File not found: {self._path}\")\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.read_text","title":"read_text","text":"<pre><code>read_text(encoding: str = 'utf-8', errors: str | None = None) -&gt; kern.AStatusOrElse[str]\n</code></pre> <p>Reads text from this file.</p> <p>Parameters:</p> <ul> <li> <code>encoding</code>               (<code>default</code>, default:                   <code>'utf-8'</code> )           \u2013            <p>utf-8): The encoding to use.</p> </li> <li> <code>errors</code>               (<code>default</code>, default:                   <code>None</code> )           \u2013            <p>None): How to handle encoding errors.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[str]</code>           \u2013            <p>Either a string of text or a Status object containing an error status.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def read_text(\n    self, encoding: str = \"utf-8\", errors: str | None = None\n) -&gt; kern.AStatusOrElse[str]:\n  \"\"\"Reads text from this file.\n\n  Args:\n    encoding (default: utf-8): The encoding to use.\n    errors (default: None): How to handle encoding errors.\n\n  Returns:\n    Either a string of text or a Status object containing an error status.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(encoding)\n  kern.DCHECK_NOT_EQ(encoding, \"\")\n  # TODO: Add check for the errors argument! Is an empty string valid?\n  # &lt;/editor-fold&gt;\n  try:\n    return self._path.read_text(encoding=encoding, errors=errors)\n  except FileNotFoundError:\n    return kern.status.not_found_error(f\"File not found: {self._path}\")\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.write_bytes","title":"write_bytes","text":"<pre><code>write_bytes(data: bytes) -&gt; kern.Status\n</code></pre> <p>Writes bytes to this file.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>bytes</code>)           \u2013            <p>The data in bytes to write.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def write_bytes(self, data: bytes) -&gt; kern.Status:\n  \"\"\"Writes bytes to this file.\n\n  Args:\n    data: The data in bytes to write.\n\n  Returns:\n    A Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(data)\n  # &lt;/editor-fold&gt;\n  try:\n    self._path.write_bytes(data)\n    return kern.Status()\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.write_text","title":"write_text","text":"<pre><code>write_text(data: str, encoding: str = 'utf-8', errors: str | None = None) -&gt; kern.Status\n</code></pre> <p>Writes text to this file.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>str</code>)           \u2013            <p>The data as text to write.</p> </li> <li> <code>encoding</code>               (<code>default</code>, default:                   <code>'utf-8'</code> )           \u2013            <p>utf-8): The encoding to use.</p> </li> <li> <code>errors</code>               (<code>default</code>, default:                   <code>None</code> )           \u2013            <p>None): How to handle encoding errors.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Status</code>           \u2013            <p>A Status object indicating success or failure.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def write_text(\n    self, data: str, encoding: str = \"utf-8\", errors: str | None = None\n) -&gt; kern.Status:\n  \"\"\"Writes text to this file.\n\n  Args:\n    data: The data as text to write.\n    encoding (default: utf-8): The encoding to use.\n    errors (default: None): How to handle encoding errors.\n\n  Returns:\n    A Status object indicating success or failure.\n  \"\"\"\n  # &lt;editor-fold desc=\"Checks\"&gt;\n  kern.DCHECK_NOT_NONE(data)\n  kern.DCHECK_NOT_NONE(encoding)\n  kern.DCHECK_NOT_EQ(encoding, \"\")\n  # TODO: Add check for the errors argument! Is an empty string valid?\n  # &lt;/editor-fold&gt;\n  try:\n    self._path.write_text(data, encoding=encoding, errors=errors)\n    return kern.Status()\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"api_reference/filesystem/kpath/#kern_comm_lib.filesystem.kpath.KPath.iterdir","title":"iterdir","text":"<pre><code>iterdir() -&gt; kern.AStatusOrElse[list[KPath]]\n</code></pre> <p>Iterates over the files in this directory.</p> <p>Returns:</p> <ul> <li> <code>AStatusOrElse[list[KPath]]</code>           \u2013            <p>Either a Python list of KPath objects or a Status object containing an error status.</p> </li> </ul> Source code in <code>kern_comm_lib/filesystem/kpath.py</code> <pre><code>def iterdir(self) -&gt; kern.AStatusOrElse[list[\"KPath\"]]:\n  \"\"\"Iterates over the files in this directory.\n\n  Returns:\n    Either a Python list of KPath objects or a Status object containing an error status.\n  \"\"\"\n  try:\n    return [KPath(path) for path in self._path.iterdir()]\n  except FileNotFoundError:\n    return kern.status.not_found_error(f\"Directory not found: {self._path}\")\n  except NotADirectoryError:\n    return kern.status.invalid_argument_error(\n        f\"Not a directory: {self._path}\"\n    )\n  except Exception as e:\n    return kern.Status.from_exception(e)\n</code></pre>"},{"location":"programming_guides/","title":"Introduction","text":"<p>This documentation serves as a companion to the comments within the Kern Python source files, providing a comprehensive overview of the library's functionality and usage. Over time, it will evolve to include detailed examples and documentation for all code within the Kern project.</p>"},{"location":"programming_guides/#core-concepts","title":"Core Concepts","text":"<p>This guide is designed for developers new to the Kern project.  The primary objective of Kern is to provide a toolset for building robust Python programs that operate without exceptions.  To achieve this goal, Kern offers several key components:</p> <ul> <li>The <code>Status</code> and <code>StatusOr</code> classes, which facilitate communication between functions and methods</li> <li>A custom decorator called <code>@use_status</code> that simplifies the use of <code>Status</code> and <code>StatusOr</code> for existing code</li> <li>A custom type called <code>AStatusOrElse</code>, which enables the communication of a value or a status object to the caller</li> </ul> <p>Currently, Kern also provides:</p> <ul> <li>A custom wrapper implementation for the <code>pathlib.Path</code> class, called <code>KPath</code>, which operates without exceptions</li> <li>A logger that supports console and file handlers, is exception-free, and can function in multithreaded environments</li> </ul> <p>These components work together to help developers build reliable and efficient Python programs using the Kern library. The kern library draws inspiration from the C++ library abseil, which is designed to provide a set of common libraries and tools for C++ developers and GLog which is a C++ logging library that provides a simple and efficient way to log messages from C++ applications.</p>"},{"location":"programming_guides/status_user_guide/","title":"Status","text":"<p>Kern contains two classes for managing status: <code>Status</code> and <code>StatusOr</code>.</p> <ul> <li><code>Status</code>: Holds information about the success or failure of an operation.</li> <li><code>StatusOr</code>: Holds either a value or a <code>Status</code> object, allowing functions to return both a result and an error status.</li> </ul>"},{"location":"programming_guides/status_user_guide/#overview-of-kernstatus","title":"Overview of kern.Status","text":"<p>The Status class is the main class for managing errors in the Kern library.  It is designed to be used in conjunction with the StatusOr class, which allows functions to return both a value and a status object.</p> <p>Example: <pre><code>import kern_comm_lib as kern\n\ndef my_function() -&gt; kern.Status: \n  if some_condition:\n    return kern.Status()  # Default constructor returns a success status\n  else:\n    return kern.Status.from_status_code(kern.StatusCode.INTERNAL, \"An error occurred\")\n</code></pre></p>"},{"location":"programming_guides/status_user_guide/#checking-for-errors","title":"Checking for errors","text":"<p>To check for errors, you can use the <code>ok()</code> method of the <code>Status</code> class.</p> <pre><code>import kern_comm_lib as kern\n\ndef my_function() -&gt; kern.Status:\n  if some_condition:\n    return kern.Status()  # Default constructor returns a success status\n  else:\n    return kern.Status.from_status_code(kern.StatusCode.INTERNAL, \"An error occurred\")\n\ndef main():\n  tmp_status: kern.Status = my_function()\n  if not tmp_status.ok():\n    print(f\"Error: {tmp_status.message()}\")\n  else:\n    print(\"Success\")\n</code></pre>"},{"location":"programming_guides/status_user_guide/#returning-a-status-or-a-value","title":"Returning a Status or a Value","text":"<p>Suppose a function needs to return a value on success or, alternatively, a <code>Status</code> on error.  The Kern library provides a <code>kern.StatusOr</code> class for this purpose. To access the value, you can use the <code>val()</code> method of the <code>StatusOr</code> class and to check for errors, you can use the <code>ok()</code> method or access the complete  status with the method <code>status()</code> of the <code>StatusOr</code> class.</p> <pre><code>import kern_comm_lib as kern\n\ndef divide(a: int, b: int) -&gt; kern.AStatusOrElse[float]:\n  \"\"\"Divides two numbers.\"\"\"\n  if b == 0:\n    return kern.Status.from_status_code(kern.StatusCode.ZERO_DIVISION_ERROR, \"Division by zero!\")\n  return a / b\n\ntmp_nominator = 5\ntmp_denominator = 0\n\ntmp_result: kern.StatusOr = kern.StatusOr(float, divide(tmp_nominator, tmp_denominator))\nif tmp_result.ok():\n  print(f\"Division of {tmp_nominator} / {tmp_denominator} is {tmp_result.val()}\")\nelse:\n  print(f\"Error occured: {tmp_result.status().message()}\")\n</code></pre>"},{"location":"programming_guides/status_user_guide/#add-status-to-existing-code","title":"Add Status to existing code","text":"<p>The Kern library provides a decorator called <code>@use_status</code> that  can be applied to existing functions to enable the use of <code>Status</code> and  <code>StatusOr</code> for error handling.</p> <pre><code>import pathlib\nimport kern_comm_lib as kern\n\n@kern.use_status\ndef exists(path: pathlib.Path) -&gt; kern.AStatusOrElse[bool]:\n  \"\"\"Checks if a path exists but in an exception-free way.\"\"\"\n  return path.exists()\n</code></pre>"}]}